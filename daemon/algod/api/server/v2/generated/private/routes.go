// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
