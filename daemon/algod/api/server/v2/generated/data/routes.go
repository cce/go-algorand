// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
