// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
