// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e5PbtrIg/lVQurfKj58441dyT/yrU3cndpIzGztxeSY5e6/Hm0BkS8IZCuABQI0U",
	"r7/7FhoACZKARM0odrJ1/rJHJIFGo9Hod3+Y5GJVCQ5cq8nzD5OKSroCDRL/onkuaq4zVpi/ClC5ZJVm",
	"gk+e+2dEacn4YjKdMPNrRfVyMp1wuoL2HfP9dCLhnzWTUEyea1nDdKLyJayoGVhvK/N2M9ImW4jMDXFm",
	"hzh/Ofm44wEtCglKDaH8kZdbwnhe1gUQLSlXNDePFLlhekn0kiniPiaME8GBiDnRy87LZM6gLNSJX+Q/",
	"a5DbYJVu8vSSPrYgZlKUMITzhVjNGAcPFTRANRtCtCAFzPGlJdXEzGBg9S9qQRRQmS/JXMg9oFogQniB",
	"16vJ83cTBbwAibuVA1vjf+cS4DfINJUL0JP309ji5hpkptkqsrRzh30Jqi61IvgurnHB1sCJ+eqEvK6V",
	"JjMglJO3374gT58+/cosZEW1hsIRWXJV7ezhmuznk+eTgmrwj4e0RsuFkJQXWfP+229f4PwXboFj36JK",
	"QfywnJkn5PxlagH+wwgJMa5hgfvQoX7zReRQtD/PYC4kjNwT+/JRNyWc/7PuSk51vqwE4zqyLwSfEvs4",
	"ysOCz3fxsAaAzvuVwZQ0g757lH31/sPj6eNHH//t3Vn23+7PL55+HLn8F824ezAQfTGvpQSeb7OFBIqn",
	"ZUn5EB9vHT2opajLgizpGjefrpDVu2+J+dayzjUta0MnLJfirFwIRagjowLmtC418ROTmpeGTZnRHLUT",
	"pkglxZoVUEwN971ZsnxJcqrsEPgeuWFlaWiwVlCkaC2+uh2H6WOIEgPXrfCBC/rjIqNd1x5MwAa5QZaX",
	"QkGmxZ7ryd84lBckvFDau0oddlmRyyUQnNw8sJct4o4bmi7LLdG4rwWhilDir6YpYXOyFTW5wc0p2TV+",
	"71ZjsLYiBmm4OZ171BzeFPoGyIggbyZECZQj8vy5G6KMz9milqDIzRL00t15ElQluAIiZv+AXJtt/58X",
	"P/5AhCSvQSm6gDc0vybAc1FAcULO54QLHZCGoyXEofkytQ4HV+yS/4cShiZWalHR/Dp+o5dsxSKrek03",
	"bFWvCK9XM5BmS/0VogWRoGvJUwDZEfeQ4opuhpNeyprnuP/ttB1ZzlAbU1VJt4iwFd389dHUgaMILUtS",
	"AS8YXxC94Uk5zsy9H7xMipoXI8QcbfY0uFhVBTmbMyhIM8oOSNw0++Bh/DB4WuErAMcPkgSnmWUPOBw2",
	"EZoxp9s8IRVdQEAyJ+Qnx9zwqRbXwBtCJ7MtPqokrJmoVfNRAkacercEzoWGrJIwZxEau3DoMAzGvuM4",
	"8MrJQLngmjIOhWHOCLTQYJlVEqZgwt36zvAWn1EFXz5L3fHt05G7Pxf9Xd+546N2G1/K7JGMXJ3mqTuw",
	"ccmq8/0I/TCcW7FFZn8ebCRbXJrbZs5KvIn+YfbPo6FWyAQ6iPB3k2ILTnUt4fkVf2j+Ihm50JQXVBbm",
	"l5X96XVdanbBFuan0v70SixYfsEWCWQ2sEYVLvxsZf8x48XZsd5E9YpXQlzXVbigvKO4zrbk/GVqk+2Y",
	"hxLmWaPthorH5cYrI4d+oTfNRiaATOKuoubFa9hKMNDSfI7/bOZIT3QufzP/VFVpvtbVPIZaQ8fuSkbz",
	"gTMrnFVVyXJqkPjWPTZPDRMAq0jQ9o1TvFCffwhArKSoQGpmB6VVlZUip2WmNNU40r9LmE+eT/7ttLW/",
	"nNrP1Wkw+Svz1QV+ZERWKwZltKoOGOONEX3UDmZhGDQ+QjZh2R4KTYzbTTSkxAwLLmFNuT5pVZYOP2gO",
	"8Ds3U4tvK+1YfPdUsCTCiX1xBspKwPbFe4oEqCeIVoJoRYF0UYpZ88P9s6pqMYjPz6rK4gOlR2AomMGG",
	"Ka0e4PJpe5LCec5fnpDvwrFRFBe83JrLwYoa5m6Yu1vL3WKNbcmtoR3xniK4nUKemK3xaDBi/jEoDtWK",
	"pSiN1LOXVszLf3PvhmRmfh/18Z+DxELcpokLFS2HOavj4C+BcnO/RzlDwnHmnhNy1v/2dmRjRtlBMOq8",
	"xeKxiQd/YRpWai8lBBAF1OS2h0pJtxMnJGYo7A3J5CcFlkIqumAcoZ0a9YmTFb22+yEQ74YQQDV6kaUl",
	"K0E2JlQnczrUnwzsLH8Cao1trJdEjaRaMqVRr8aXyRJKFJwp9wQdksqtKGPEhu9YRAPzjaSVpWX3xIpd",
	"jKM+b1+ysN7x4h15J0ZhDth9sNEI1a3Z8l7WGYUEuUYPhq9LkV//jarlEU74zI81pH2chiyBFiDJkqpl",
	"5OD0aLsdbQx9mxeRZsksmOqkWeKxlrdnaQXVNFiagzcuwVrU43d4P4KMqLk/4n9oScxjcw0YKcEOe0Iu",
	"kXsoy/mdP6qwnM0cCjuTeQENVoKsrC2IVDS/PgjKF+3k8X0atUffWPOT2yG3iGaHLjesUMfaJhwstVeh",
	"LnP+0ir//ioaMPPuRRNbu51rDAIuRUVKWEPZB8GyLBzNIkRsjs4XvhabGExfi82AJ4gNHGUnzDijL/qv",
	"xealg0zI/ZjHsccg3SzQqH0K2QMPpWUzS+vYOJsJeTt23OOznLTuGkLNqMFtNO0hCV+tq8ydzYjJ177Q",
	"G6j1kO/mov3hYxjrYOFC098BC8qMegwsdAc6NhbEqmIlHIH0l9FbcEYVPH1CLv529sXjJ788+eJLQ5KV",
	"FAtJV2S21aDIfWfXIEpvS3gQFS/R7BQf/ctn3sjfHTc2jhK1zGFFq+FQ1nlg1Qf7GjHvDbHWRTOuugFw",
	"FEcEc7VZtBPrFzOgvWTKCJ+r2VE2I4Wwop2lIA6SAvYS06HLa6fZhkuUW1kfQ68CKYWMXl2VFFrkoszW",
	"IBUTEc3ojXuDuDe8alj1f7fQkhuqiJkb3SY1LxIKkN7w8XzfDn254S1udnJ+u97I6ty8Y/ali/xW96lA",
	"ZnrDSQGzetHRy+ZSrAglBX6Id/R3oK3cwlZwoemq+nE+P46ZReBAEQWSrUCZmYh9w0gNCnLBbRTRHl3R",
	"jToGPX3EePO2TgPgMHKx5Tna6I9xbNNq9IpxdBiqLc8DndrAWEKx6JDl3XXnFDrsVPdUBByDjlf4GI2E",
	"L6HU9FshL1ux7zsp6uroQl5/zrHLoW4xzgxZmG+9/YnxRdmNXFsY2E9ia/wsC3rhj69bA0KPFPmKLZY6",
	"0LPeSCHmx4cxNksMUHxgtdTSfDPUVX8QhWEmulZHEMHawVoOZ+g25Gt0JmpNKOGiANz8WsWFs0SsEwZZ",
	"YGyIDuU9vbSK5wwMdeW0NqutK4KRD4P7ov0wo7k9oRmiRiX8vo3D3r5lp7NxNKUEWmzJDIATMXPOVef2",
	"xUVSDNvQXrxxomGEX3TgqqTIQSkoMmcD2wuaf89eHXoHnhBwBLiZhShB5lTeGdjr9V44r2GbYZCRIve/",
	"/1k9+AzwaqFpuQex+E4MvY3dw3nQh1CPm34XwfUnD8mOSiD+XiFaoDRbgoYUCg/CSXL/+hANdvHuaFmD",
	"RF/270rxfpK7EVAD6u9M73eFtq4SobNOvTUSntkwTrnwglVssJIqne1jy+aljg5uVhBwwhgnxoETgtcr",
	"qrSNv2C8QFugvU5wHiuEmSnSACfVEDPyz14DGY6dm3uQq1o16oiqq0pIDUVsDegKSs71A2yaucQ8GLvR",
	"ebQgtYJ9I6ewFIzvkGVXYhFEdeP4ca6k4eLQmWfu+W0UlR0gWkTsAuTCvxVgNwwfTADCVItoSzhM9Sin",
	"iVmcTpQWVWW4hc5q3nyXQtOFfftM/9S+OyQuqtt7uxCgMGrRve8gv7GYtYGjS6qIg8P79tAMYgNFhjCb",
	"w5gpxnPIdlE+qnjmrfAI7D2kdbWQtICsgJJuI15J+5jYx7sGwB1v1V2hIbMRgPFNbynZB1ztGFrgeCom",
	"PBJ8QnJzBI0q0BKI+3rPyAXg2DHm5OjoXjMUzhXdIj8eLttudWREvA3XQpsdd/SAIDuOPgbgBB6aoW+P",
	"Cvw4a3XP/hT/BcpN0MgRh0+yBZVaQjv+QQtI2FBdckVwXnrsvceBo2wzycb28JHUkU0YdN9QqVnOKtR1",
	"voft0VW//gRRvyspQFNWQkGCB1YNrMLviY1d6495O1VwlO1tCP7A+BZZjo8P6AJ/DVvUud/YoOjA1HEM",
	"XTYyqrmfKCcIqA+1NCJ4+ApsaK7LrRHU9BK25AYkEFXPVkxrm+zQVXW1qLJwgKhfY8eMzqsZ9SnudLNe",
	"4FDB8mJBLlYn2A3fZU8x6KDD6QKVEOUIC9kAGVEIRkWfkEqYXWcu78JH3ntK6gDpmDa6tJvr/57qoBlX",
	"QP5L1CSnHFWuWkMj0wiJggIKkGYGI4I1c7qoqBZDUMIKrCaJTx4+7C/84UO350yROdz4ZCXzYh8dDx+i",
	"HeeNULpzuI5gDzXH7TxyfaDDx1x8Tgvp85T9oRZu5DE7+aY3eOMlMmdKKUe4Zvl3ZgC9k7kZs/aQRsaF",
	"meC4o3w5HZf9cN247xdsVZdUH8NrBWtaZmINUrIC9nJyNzET/Js1LX9sPsNELMgNjeaQ5Zg+NHIsuDTf",
	"2IwjMw7jzBxgG208FiA4t19d2I/2qJhtiBxbraBgVEO5JZWEHGyijZEcVbPUE2JDcPMl5QtUGKSoFy6q",
	"zo6DDL9W1jQjaz4YIipU6Q3P0MgduwBc3L/PtTLiFFCj0vUt5FaBuaHNfC69bszNHOxB32MQdZJNJ0mN",
	"1yB13Wq8FjndhLERl0FH3gvw00480pWCqDOyzxBf4baYw2Q29/cx2bdDx6AcThyEGrYPU9GGRt0ut0cQ",
	"euxAREIlQeEVFZqplH0q5mFyqLvD1FZpWA0t+fbTXxLH721SXxS8ZByyleCwjdZDYBxe48PoccJrMvEx",
	"Ciypb/s6SAf+HljdecZQ413xi7vdP6F9j5X6VshjuUTtgKPF+xEeyL3udjflbf2ktCwjrkWXOtZnAGra",
	"xFkzSahSImcos50XamoPmvNGujyzLvrfNAHxRzh7/XF7PrQwKxltxFBWhJK8ZGhBFlxpWef6ilO0UQVL",
	"jQQ/eWU8bbV84V+Jm0kjVkw31BWnGPjWWK6iARtziJhpvgXwxktVLxagdE/XmQNccfcW46TmTONcK3Nc",
	"MnteKpAYgXRi31zRLZkbmtCC/AZSkFmtu9I/ZkYqzcrSOfTMNETMrzjVpASqNHnN+OUGh/NOf39kOegb",
	"Ia8bLMRv9wVwUExl8SCt7+xTDCh2y1+64GKsZGEf+2DNNlV7YpbZqc7wv+//5/N3Z9l/0+y3R9lX/9/p",
	"+w/PPj54OPjxyce//vX/dH96+vGvD/7z32M75WGP5e05yM9fOs34/CWqP60PaAD7J7P/rxjPokQWRnP0",
	"aIvcxxx1R0APusYxvYQrrjfcENKalqwwvOU25NC/YQZn0Z6OHtV0NqJnDPNrPVCpuAOXIREm02ONt5ai",
	"hnGN8QxZdEq6pFc8L/Oa26300rdNAPPxZWI+bbKgbYGk5wRTZJfUB0e6P5988eVk2qa2Ns8n04l7+j5C",
	"yazYxBKYC9jEdEV3QPBg3FOkolsFOs49EPZoKJ2N7QiHXcFqBlItWfXpOYXSbBbncD5XwtmcNvyc28B4",
	"c37Qxbl1nhMx//RwawlQQKWXscIpHUEN32p3E6AXdlJJsQY+JewETvo2n8Loiy6orwQ6xwIeqH2KMdpQ",
	"cw4soXmqCLAeLmSUYSVGP720AHf5q6OrQ27gGFz9ORt/pv9bC3Lvu28uyaljmOqezaW3QwfZzxFV2mVt",
	"dQKSDDez5aKskHfFr/hLmKP1QfDnV7ygmp7OqGK5Oq0VyK9pSXkOJwtBnvtEsJdU0ys+kLSSFd2CbE1S",
	"1bOS5eQ6VEha8rRVeoYjXF29o+VCXF29H8RmDNUHN1WUv9gJMiMIi1pnrsZIJuGGypjvSzU1JnBkW0Ro",
	"16xWyBa1NZD6GiZu/DjPo1Wl+rnmw+VXVWmWH5ChcpnUZsuI0kJ6WcQIKC6X0OzvD8JdDJLeeLtKrUCR",
	"X1e0ese4fk+yq/rRo6dAOsnXv7or39DktoLR1pVkLnzfqIILt2olbLSkWUUXMRfb1dU7DbTC3Ud5eYU2",
	"jrIk+Fkn6dsH5uNQ7QKa3MrkBlg4Ds5KxMVd2K98Pbn4EvARbmE38/NO+xUk7t56u/Yk/9JaLzNztqOr",
	"UobE/c40ZaYWRsjy0RiKLVBbdRW5ZkDyJeTXrlQSrCq9nXY+9wE/TtD0rIMpW0TLZuZhGRd0UMyA1FVB",
	"nShO+bZfT0OB1j6s+C1cw/ZStFVgDimg0a3noFIHFSk1kC4NsYbH1o3R33wXVYaKfVX5sgiY9OjJ4nlD",
	"F/6b9EG2Iu8RDnGMKDr1BlKIoDKCCEv8CRTcYqFmvDuRfmx5RsuY2ZsvUlDL837iXmmVJxcAFq4Gre72",
	"+QqwIp+4UWRGjdwuXDE5W7Mg4GK1ogtISMihj2hkunfHr4SD7Lv3ojedmPcvtMF9EwXZvpyZNUcpBcwT",
	"QyqozPTC/vxM1g3pPBNYI9YhbFaimNTER1qmQ2XHV2eLXqZAixMwSN4KHB6MLkZCyWZJla9zh+UA/Vke",
	"JQP8jlUNdlVeOg8i1oKaf01dJc9z++d0oF26+ku+6JKvtBSqliOqJhkJH4PkY9shOApABZSwsAu3L3tC",
	"aeuBtBtk4PhxPi8ZB5LFgt8CM2hwzbg5wMjHDwmxFngyeoQYGQdgo3sdByY/iPBs8sUhQHJXz4T6sdEx",
	"H/wN8fQxGw5uRB5RGRbOEl6t3HMA6iImm/urF7eLwxDGp8SwuTUtDZtzGl87yKAAEIqtvXI/LsDjQUqc",
	"3eEAsRfLQWuyV9FtVhPKTB7ouEC3A+KZ2GQ2fzQq8c42M0Pv0Qh5zGaNHUxbaumeIjOxwaAhvFpsRPYe",
	"WNJweDACDX/DFNIrfpe6zS0wu6bdLU3FqFAhyThzXkMuKXFizNQJCSZFLveD6km3AqBn7GhLkTvld6+S",
	"2hVPhpd5e6tN26qAPvkodvxTRyi6Swn8Da0w3XpHf2vrWqVr5/gT9UkKPQ3tF3cpwGU/rmxRrUPqb/XJ",
	"oQPEDqy+6cuBUbR2I4q6eA2wFmMlhvkOXV9DtCkoAVWtrCOaZtcxf7TRGAHv8Qv/WWASwt2jfPsgCFOT",
	"sGBKQ+ua8NEnn8PoS7E6qBDz9Op0JedmfW+FaC5/65zFDzvL/OQrwDjvOZNKZ+jXiS7BvPStQlPFt+bV",
	"uATaDYSztbRZEee4OO01bLOClXWcXt2837800/7QXDSqnuEtxrgNA5ph7fdoeOyOqW0E9c4Fv7ILfkWP",
	"tt5xp8G8aiaWhly6c/xJzkWPge1iBxECjBHHcNeSKN3BIIO05iF3DKTRIHLiZJdNe3CYCj/23lgon1yd",
	"uvntSNG1BGaYnatg6HwzVyLTQen0Yb5x4gzQqmLFpmdhtqMm7RD0IDNS4sLD3XWD7cFAN9oxGjzeKdbp",
	"YiqdJe0U1Y5TIxjbIEsXQQgSRQybaVvUEk2VnRDGYWXYRlweufbvf77QQtIFOHNzZkG60xC4nEPQENRd",
	"VUQz6zcu2HwOoZlV3cZE2AGub0yLdlcZQWRxW2zNuP7yWYyM9lBPC+N+lMUpJkILKefb5dCc7cWqQJtv",
	"6l4GW3MLm3Q0L/d72GY/G72PVJRJ1cbhOftyl/8dsOvr1fewxZH3hrcZwPbsCir/bwFpMGZsbR6poETm",
	"PdUpIowSfmcLD9ips/guHWlrXNnnNPG3we6dssjdpdzlYLTeUAPLmN24iDshzemBLuL7pLxvE1jCxBmS",
	"YyByhVMx5ZtkDa+iJul8H+1eAi098eJyJh+nk7u5/GK3mRtxD67fNBdoFM8YUmZdQB0P/oEop1UlxZqW",
	"mXOMpi5/Kdbu8sfXvR/1EwuTccq+/Obs1RsH/sfpJC+ByqxRxpKrwveqP82qbKHo3VcJSize1mSV9WDz",
	"m5KloTP1Zgmum0mg7w/KrreO8uAoOufqPB7Zupf3OZ++XeIO3z5UjWu/dTtZz37Xm0/XlJXe3+OhTUSh",
	"4uLG1e6PcoVwgDtHBQTBHdlR2c3gdMdPR0tde3gSzvUj1qCLaxzcVahDVuS8/PTo0tO3QnaYv0tBikYJ",
	"/H5ilRGyLR4TQZm+Q1ZfmDohVvD6dfGrOY0PH4ZH7eHDKfm1dA8CAPH3mfsd9YuHD6MOnKglwTAJNBRw",
	"uoIHTTh1ciM+rdmJw824C/psvWokS5Emw4ZCrbvfo/vGYe9GMofPwv1SQAnmp/0Zi71Nt+gOgRlzgi5S",
	"KUdNNNnKNuVSRPB+8CRmuxnSQma/oth2wPrDhkeI1yv0IWWqZHncu85nyrBXbqOmzMsEX04YzMyINUsE",
	"4fGaBWOZ18YUR+wBGcwRRaaK1mdscTcT7njXnP2zBsIKo9XMGUi813pXnVcOcNSBQGpUz+FcbmDrKmiH",
	"v4sdZIfJ3wKx2wiy04XysjHr+4XG2gocGOoZzjhg3DvCNB19OGq2aSvLbqzVOD1mTHNWz+icvyQxR7TZ",
	"KlPZXIrfIG6LRhN+JOPd+54Yxjf/BqF6FrYY7LCUxq/X9oxtZ9+33eN149TG31kX9otu+prc5jKNn+rD",
	"NvI2Sq+K12V1SE4pYaGTtxsDnGAteLyCqDfsE+ADQCi358mme3dSSeKnMkzaOrXjt6fSwTxIdCvpzYzG",
	"migYXcjAFGxvJ1RFC+I/9hugmmRmOzsJQjWbd5ktGVWBbCt+DMtP3lKvsdOO1mhaBQYpKlRdptZTXCoR",
	"GabmN5TbPqXmO8uv3NcKrBfUfHUjJBZ8U/GomgJytoqaY6+u3hX5MIKiYAtmW3DWCoIej24g297YUpHr",
	"k9mk6DvUnM/Jo2nQaNbtRsHWTLFZCfjGY/vGjCq8LhuPZPOJWR5wvVT4+pMRry9rXkgo9FJZxCpBGt0T",
	"hbwmNmwG+gaAk0f43uOvyH2MilNsDQ8MFp0QNHn++CuMabB/PIrdsq6F6i6WXSDP/rvj2XE6xrBAO4Zh",
	"km7Uk2htLNtDPX077DhN9tMxZwnfdBfK/rO0opwuIB6IvdoDk/0WdxM9qj28cOsNAKWl2BKm4/ODpoY/",
	"JZI7DfuzYJBcrFZMr1zslBIrQ09tA0c7qR/OdhN2DVU8XP4hhiBWPgKrZ+v6xGoMXSWSMzBQ9Ae6gi5a",
	"p4TaKn8la4ODfUcwcu6LiGKHmaaxjMWNmcssHWVJjBWek0oyrtH+Uet59hejFkuaG/Z3kgI3m335LNKp",
	"pdvMgB8G+CfHuwQFch1HvUyQvZdZ3LfkPhc8WxmOUjxok6mDU5mMlYxHxaVC83YPPVbyNaNkSXKrO+RG",
	"A059J8LjOwa8Iyk26zmIHg9e2SenzFrGyYPWZod+evvKSRkrIWOVwdvj7iQOCVoyWGNqTHyTzJh33AtZ",
	"jtqFu0D/eUNQvMgZiGX+LEcVgcCjuSsr1kjxP79uSxyjY9WmHPVsgEJGrJ3ObveJA74Os7r1/bc2Zgef",
	"JTA3Gm04yhAriQBoG+HcfPOJk6Sj5l675x2D4+NfiTQ6OMrxDx8i0A8fTp0Y/OuT7mPL3h8+jFcajZrc",
	"zK8tFu6iEeO3sT38WkQMYL6tVxNQ5BKhIwbI1CVlHhgmOHNDTUm3hdKnlyKOk2ITD/iLn4Krq3f4xOMB",
	"/+gj4jMzS9zANlA8fdi7LeSiJFM0z4NQY0q+FpuxhNO7gzzx/AFQlEDJSPMcrmTQIi/qrt8bLxLQqBl1",
	"BqUwSmbY/SO05/958GwWP92B7ZqVxc9tEafeRSIpz5fRQM2Z+fAXK6N3rmDLKqMNBZaUcyijw1nd9hev",
	"A0e09H+IsfOsGB/5br9Fo11ub3Et4F0wPVB+QoNepkszQYjVbn2cJv+6XIiC4Dxt9fqWOQ57nQYN2LDl",
	"c+xo2F7QqOCjs8swX9v/iwAv0Pp1Qr7DShUGlk5pYrQ6+aKP3QJodVUKWkyxGOXlN2eviJ3VfmN7d9v+",
	"Yws0unRXEbWSH9xMO1XpYPw4u1OvzaqVzpp2YbFaUuaNtqEZ64VOoDkmxM4JeWktYcrbWewkBEuayhUU",
	"QXcyq4shTZj/aE3zJZqYOhdZmuTHN87zVNka4IM8nqZbBZ47A7frnWdb500Jdh2/YQowtxXW0C1f1dRy",
	"cyZOX86quzxZc24p5ZBm5E1vikPR7oGzAon3DUch6yH+QAOD7Tt5aB/BC/wqWjy735Sw57z1xZCa7sqv",
	"nY04p1xwlmPp6phAhKV2xnmbRlT5jruJ1MSd0MjhirZCbLLqHBaTzRE9I3SIG3pug6dmUy112D81bFyL",
	"nAVo5TgbFFPf0dP5NRhX4LqPGCIK+aSQkdiUaDx74wc/kIywikbCUPWtefaDM2Nievk142iwcGhzYrb1",
	"PJSKoYORE6bJQoBy6+mWElPvzDcnWFWrgM37k1diwfILtsAxbDSUWbYN/RsOdeYDAV3gnXn3hXnX1Tpu",
	"fu5E9dhJz6rKTZru9xpvcr3hSQTHwk98PECA3Gb8cLQd5LYzghfvU0NosMbgI6jwHh4QRtP7tNdo3KgI",
	"lqLwDWJzk6IFDxmPgPGKce8Ji18QefRKwI3B85r4TuWSaisCjuJpl0DLRBw75vpZV+pdh+pXejYowTX6",
	"OdLb2LZtTTCO5oVWcKN8S/yhMNQdCBMvaNlEwEaasKJU5YSoAnNEem1ZY4zDMG7f+Ll7Aezp9T5tP8fq",
	"6YfeRKmaUrO6WIDOaFHEmsF8jU8JPvW5PrCBvG6ahlQVybGEarem7JDa3ES54Kpe7ZjLv3DH6YI+xxFq",
	"CHst+x3GmhWzLf57SBf+Jvb14Pw2H+haHFZIeZivF5N6DU1nii2y8ZjAO+Xu6Ginvh2ht98fldJLsegC",
	"8jmMpAkuF+5RjL99Yy6OsNDiIMzYXi1NHUQM6RX43JcOaSp4dbkSXmWDvjDovG663+82Q6T72E/x8kvk",
	"lIYmb3u/WjNwKrM0TyZCU+0K3WhKdrKgZPEQG/LZM6IPPUGpME8b5Xk847Nb606Epl0w33ccLjbUp2UW",
	"SUfL7Xwh7QYf6gz5fp1KNvZ11fF5v8/1Nbjqd5WENRO1D6LxoaxeJbS/drpGN+ne0fVHA8Q/t/E5aSq/",
	"dP0G7TKdTv79z9aZRoBruf0DGM4Hmz7ooD2Udq15qn2FNK2qRrWu6tyKY3oOxMrbO9mw08N7TwfyAVm9",
	"HCMODDuKTyfnxUEXZqxFwsSOEjt28f7g6QrSbdVoPGKVUKztGBdrHD4yZvwSe38HFbCHY/lYwjXkGtsE",
	"tjFSEuCQethmMm+7/1cl6bQ63YTWuwLSu6pGD3sD7rnjByVIgjI6tq/ayfgayWdNJKxN5LmhCjsKSLRx",
	"d1NfRyfgzeeQa7beU/Ll70vgQTmRqbfLICzzoAIMa9JRsA7r4VbHFqBdFVl2whP0Q7gzOKl05GvY3lOk",
	"Qw3RRm9NLtZtSnAiBpA7ZIZEhIpFmllDsgv+YaqhDMSCj+y0n0NbzDzZIzooYHTLuTxJmoujLWq0Y8p4",
	"k9pRc5lPDyqghpkVqaowwx6Xaf3jJbYUVS7OiTYlPEMtnZwPGx3cuBKgWKCn8Z34YqCg/G++GpedpWTX",
	"EHaxRk/VDZWFfyNqevFWnWzHfTQo5eL7M/aBnjczszYOf+irjpTOxpSWvBRGjMhSeUHd0PcmbuyesgF+",
	"bR0WhGsO0nX7R/m3FAoyLXzc/i44dqHCRjHeCgkq2a7CApcsIvu2rZKLbXsoFo2lLngxXCCRsKIGOhnU",
	"sk3PuQvZL+xzn0vt27bstTA19Lq/f6DPwGBqgMSQ6ufE3Zb7c7RvY2xinIPMvOepX9iWg+x6Qyopijq3",
	"F3R4MBqD3OgSKDtYSdROkw9X2dMRglzna9ieWiXIN170OxgCbSUnC3pQuq+3yUc1v6kY3IujgPc5LVfT",
	"SSVEmSWcHefDarx9ir9m+TUUxNwUPlI50VOX3Ecbe+PNvlluffXZqgIOxYMTQs64zQ3xju1uO6je5Pye",
	"3jX/Bmctalsg2xnVTq54PMgeS1fLO3IzP8xuHqbAsLo7TmUH2VPrdZOoBCzpTaTD9MlYrXzoau53/W2J",
	"ykIRk0kurMfqBR70mOEIM9mDkgvoyKTEebqIKkUsJPM22fZmqDimwskQIA18TNJ3A4UbPIqAaB/byCm0",
	"Fcxc7TIxJxJaJ/Jti7gNW+7GNPr+zM0sXX43FxI6zXPN10IWXuRhqu1yTeWMaUnl9jal1gYtfwfWkySW",
	"94ZjNZFY7ULaaKwhDstS3GTIrLKmYnxMtTXvqe5l7JvktN+ZUz2DIK6LKieobcmSFiQXUkIefhFP27NQ",
	"rYSErBQY5hXzQM+1kbtXmKvDSSkWRFS5KMB2XohTUGqumnOKYhMEUTVRFFjawaRP+01AxyOnPFa/aVuc",
	"xy46s77MROApKFeMx2HIvjyEd0ev5oN6HpzP0SLEMNalm3ttpc+wYzUc2LCalaU3GKR6VpOfVI3hSJh4",
	"Y6Z4RlZCaafZ2ZFUM1Qb4nU/F1xLUZZdI5AViRfOsv2abs7yXL8S4npG8+sHqEdyoZuVFlOfltoPxmtn",
	"kr2KTCOba18uI3ZenMWfuoM7aDvOcXDj2wDM9/s51n4b91msQXh3Xf2O9zxRO1OLFcvjNPznim5LxqTF",
	"WEK01JPtPWWT8/E1ZNTh5dAEMyBLGqIZuCHY2H45nuacusg8zH9R4u2PS+bgLonExTTkk05qyfKkbNUD",
	"ACG1GaO6lrZhVSj5NFxFLGyGObqk+4CO5OIY+XM32MwIRwdKw52AGkQbNgDet8r+1JbkspGLM7Hxzx+0",
	"NbtuBfzH3VQea/IfOcUNaUkbVOXreyQ4Qrwy8M74I2zH7m/Q/VFITXPBkTdqAEA6LqkDw6jopEPBmFNW",
	"QpFRnbjc0SY0DTRbl9HSbxnLlOPkObUX9hKIGbuW4OpNWJG612K+ooaURPP60HLLC9iAwmIQtk82VdbP",
	"4P0dUNpmXT3lW1RZCWvohGu5Ihg1inZsDf5b1XxMCoAKvX99m1QsDim8y3uGCrf2LIhkGYPdqOXCItbu",
	"FNljlogaUTY8s8dEjT1KBqI1K2rawZ86VOTomt3MUY6gaiCTZ15vGzvNT3aEt36AM/99TJTxmHg/jg8d",
	"zILiqNvFgPbGJdYqdep5PCwxrPDSODRwtqJxfFoSb/mGqugNTxsAhyTfqjcj94kJHiD2mw3kKNV04+7u",
	"jhOCgxHVq96UFMFls8O3NyR/FhreScLJ8WKqhgJksDstNZ4unMCOL2CTUG7EXiM1Y2Mux/8d/5uSWe0H",
	"Mnq17RMWanAvwXvssKB046xwAi1rLjQfXzh19QT7SjkLIqtXdEuExH+MvvbPmpZsvsUTasH3nxG1pIaE",
	"nIvQ+q5dvKKZeLdgMvWAebuA8FPZdbOxYwbDbc0oAdDmCnTGKawMdA3hNqBb3nKeXBuWo+rZiimFl11v",
	"O4dYcIv3NSFWtAh1ZKxM123Q6muVmq///zZrK5zKF5SqSpr7rnBAFF31DOK286MnLr2E1e60vqF67Emg",
	"6SbZEq306bzFLYx7B0ZuxGLlU/0eOmAPuuwNWl3caRmHtH1uM6N3JESOWsqxd2FsfMgA6LA31z7ww1Zl",
	"nwb/0aKRqWWMAf+PgvdEc8IQXtuH8BNguZPyH4HV2lVnYpNJmKt9oRDWsGoUYdkWC/DGScZzCVTZ2JDz",
	"H53K1tZEZNyokDZ6sfG+NaMUMGe8ZZaMV7WOaABYGpFvA4SF5mlEa8LZk5ISjBi2puWPa5CSFamNM6fD",
	"tvEKa9J7k7z7NqL8N3fqcACmWu0HMwmhzVQLXjMXuO16YwMLlaa8oLIIX2ec5CDNvU9u6Fbd3vdhoJW1",
	"kS/2eD9oIM1089sDPwiStgWk3Dr35R09Ew2A9IguihGuBYxgjbgVrFFEi4QnYQhDvKwC3WSlWGB+WYIA",
	"XfFJ9P1YZUVwNNhaeeiweRT7DXZPg3W33cHXAmcdM8Xuc/Yjog4Vnp840ztPmrWm9RP+bESmPQie/vmi",
	"DQu3mzOk/1iO5iUmMXTyNPut/P1e2/AQOx8kPBldC25iF9FB7hJ8Q3Pt+H5GXR98LBPU6rAZ6rZqR+A3",
	"qDbImeYucGdo9BkoxRYpU5dHe6BNyFqS/T2QAM/2/3VnqzttE0xhxjmkCdTuzNmsElWWj4kGtKX5C2fQ",
	"dpB2YUzQR2CuTqy7CZxQTbOKTmGTTteKQ/tgJbtm7PPLVPkuJTtl0Ehw0K6xXMyRl9nuuGiHwRyPxngx",
	"7WcfdQ02DZMglEjIa4kGzRu63d9XKFES9uJvZ188fvLLky++JOYFUrAFqLascK8vTxsxxnjfzvJpY8QG",
	"y9PxTfB56RZx3lPm022aTXFnzXJb1dYMHHQlOsQSGrkAIscx0g/mVnuF47RB33+s7Yot8ug7FkPB779n",
	"UpRlvKx7I7pFTP2x3QqM/Ubir0AqprRhhF1fHdNtrKxaojkOi3uubZ0RwXNXfb2hAqYTwTixhaRCLZGf",
	"Ydav828Q2FSl41XWJ7FrXU4vshYxDM7A+I0ZkEpUTpRmcxKDCHNLZJBz6QyNGN4ZRE82zNbGUcYI0cUk",
	"x0nvjDvNU8zJbm7f7dao45zebGJEvPCH8hakmbKkpzPab8NJWlP6H4Z/RFL0j8Y1muX+Hrwiqh/crvHx",
	"KNCG6doR8kAAEnmYnQy6sC96W2lUWqs82u+9q7MvfrxuXaB7EwYQEv/BHvDCxMr2vSbG3YHzmUt2vm6Q",
	"EizlfYoSOsvfl6vpWW9zkQRb5IwUWoOybEkMxcIgEVe9aPJbE1rJIA0Wm6AbzbQsI+mz1m6CZyokHKMS",
	"yDUtPz3XwO74Z4gPKN6mk2bCHMoQyRaV6nYV3F7RUXMH+ZLHm5q/wZTdv4PZo+g954Zy7uLBbYZWL2xJ",
	"vfC3gs0CJjc4pg0Hevwlmblq+pWEnKm+G/rGCydNyiBINnehl7DRe3IU963zZ6HvQMZzHzNCfgjcSQLN",
	"di2E7RH9zEwlcXKjVB6jvgFZRPAX41Fh980918UdK6/friBIUNrrwIIgw76iY5dni16YS6dWMFzn6Nu6",
	"g9vIRd2ubWw1m9EF3K+u3unZmCI08WLr5nOsgnOUqusH1Vz/HerfWBy5Mdy8MYr5OVUR1Vb9TBTf7e1H",
	"zcq9ASKdUsofp5MFcFBMYbHgX1xziE97l3oIbE7+8KhaWO9SSMQiJrLWzuTBVEGR5BH1kd1nkWrImO+W",
	"15LpLTYG9QY09ku0Us93TdUHVzWk8V25u0+La2iaM7c1Imrlb9fvBC3xPrIuNW5uIVGekG82dFWVzhxM",
	"/npv9h/w9C/PikdPH//H7C+PvniUw7Mvvnr0iH71jD7+6uljePKXL549gsfzL7+aPSmePHsye/bk2Zdf",
	"fJU/ffZ49uzLr/7jnuFDBmQLqK/d/Xzyv7KzciGyszfn2aUBtsUJrdj3YPYGdeW5wMZ1Bqk5nkRYUVZO",
	"nvuf/oc/YSe5WLXD+18nrgHLZKl1pZ6fnt7c3JyEn5wuMCk806LOl6d+Hmwn1pFX3pw30eQ27gV3tLUe",
	"46Y6UjjDZ2+/ubgkZ2/OT1qCmTyfPDp5dPLY9a7ltGKT55On+BOeniXu+6kjtsnzDx+nk9Ml0BJrqJg/",
	"VqAly/0jCbTYuv+rG7pYgDzBhAH70/rJqRcrTj+45PiPu56dhiEVpx86NQSKPV/6kIF9r5x+8E0udw/Y",
	"aXDogrWCD0YCuuu10xk2thj7KoSrSy8F9RF1+gEl6uTvp84sEn+Imo09Mqe+Fkf8zQ6WPuiNgXXPFxtW",
	"BCvJqc6XdXX6Af+DBB4Abes0nuoNP0Xn6umHzlrd48Fau7+3n4dvrFeiAA+cmM9t889dj08/2H+DiWBT",
	"gWRGcsTaKO5XW8PqFHtAbYc/b7lzTZYQqzzyE1dgNVtfN37L8zahqjnz54V/+WLLcy/i+nhBPMlPHj2y",
	"0z/D/0xcj5RefY5Td2Qn4xq/dysjIp/s2dYaeG3aGOiTCcLw+NPBcM5tjKBhnJbBf5xOvviUWDg3Sj+n",
	"JcE37fRPP+EmgFyzHMglrCohqWTllvzEmzDHoGNljAKvubjhHnIjHdSrFZVblLpXYg2KuGaYAXESCUbO",
	"saEQ6K5vaRivJ7pQ6FysZyXLJ1NbB/M9SlY6JmR4g89wJm/sagfvnorv9p6J8bvQlV13FB4ZBeeelHQ7",
	"/FDwHu6v3/u+u9ROdS+2QZN/MYJ/MYIjMgJdS548osH9hdWzoHKJkznNl7CLHwxvy+CCn1QiVh7gYgez",
	"cD0qUrziossr2jC8yfN34zpxOQ+FNT4XoMxhPvGKh5GqW71ANhzJn3n0jwZ7vavJ8Mf3f4j7/QXl/jx3",
	"dty6IKksGciGCigftg35Fxf4f4YL2P5H1O7rlGgoSxWefS3w7FtvjSuKyK0XbSQf6NSwbIXpzs+n3sYQ",
	"UzO7b37o/NlVndSy1oW4CWZB67x1LQ21DPOwVv2/T28o09lcSFc6ERunDz/WQMtT1yel92tbmnzwBOut",
	"Bz+GSYrRX0+pUzdizyrbpj/xsK/yxp46lS/xko8Q9o9bC1locUI+29ia3r03XA47IjsW3BpQnp+eYsrI",
	"Uih9Ovk4/dAzroQP3zeE5Rv5TSrJ1lip/v10ssmEZAvGaZk5w0Xb7Gny5OTR5OP/DQAA//8KaGgWxfwA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
