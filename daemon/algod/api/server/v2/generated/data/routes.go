// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round basics.Round) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round basics.Round

	err = runtime.BindStyledParameterWithOptions("simple", "round", ctx.Param("round"), &round, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
