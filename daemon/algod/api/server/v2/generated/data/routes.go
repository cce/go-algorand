// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
