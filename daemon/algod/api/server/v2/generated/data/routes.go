// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
