// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
