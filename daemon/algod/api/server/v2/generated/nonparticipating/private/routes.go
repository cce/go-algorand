// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
