// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//nNJpuZcSAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
