// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
