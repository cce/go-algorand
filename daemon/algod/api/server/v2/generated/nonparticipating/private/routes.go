// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithOptions("simple", "catchpoint", ctx.Param("catchpoint"), &catchpoint, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
