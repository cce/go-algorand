// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
