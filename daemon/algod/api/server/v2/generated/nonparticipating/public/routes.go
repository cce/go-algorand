// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "header-only" -------------

	err = runtime.BindQueryParameter("form", true, false, "header-only", ctx.QueryParams(), &params.HeaderOnly)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter header-only: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//8nYsX5NcMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
