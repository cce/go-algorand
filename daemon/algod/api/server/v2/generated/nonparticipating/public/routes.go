// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9/XfbtrIo+q9g6d618nFFOV/t2c1bXee5Sdvt0yTNit3us0+T10DkSMI2BXADoCw1",
	"L//7XRgAJEiCEmXLTtL6p8QiCQwGg8F8z4dRKpaF4MC1Gj39MCqopEvQIPEvmqai5DphmfkrA5VKVmgm",
	"+Oipf0aUlozPR+MRM78WVC9G4xGnS6jfMd+PRxL+XTIJ2eipliWMRypdwJKagfWmMG9XI62TuUjcEMd2",
	"iJPno49bHtAsk6BUF8qfeb4hjKd5mQHRknJFU/NIkQumF0QvmCLuY8I4ERyImBG9aLxMZgzyTE38Iv9d",
	"gtwEq3ST9y/pYw1iIkUOXTifieWUcfBQQQVUtSFEC5LBDF9aUE3MDAZW/6IWRAGV6YLMhNwBqgUihBd4",
	"uRw9/W2kgGcgcbdSYCv870wC/AGJpnIOevRuHFvcTINMNFtGlnbisC9BlblWBN/FNc7ZCjgxX03Iy1Jp",
	"MgVCOXnzwzPy+PHjb8xCllRryByR9a6qnj1ck/189HSUUQ3+cZfWaD4XkvIsqd5/88MznP/ULXDoW1Qp",
	"iB+WY/OEnDzvW4D/MEJCjGuY4z40qN98ETkU9c9TmAkJA/fEvnzQTQnn/6S7klKdLgrBuI7sC8GnxD6O",
	"8rDg8208rAKg8X5hMCXNoL89SL559+Hh+OGDj//rt+Pkf9yfXz3+OHD5z6pxd2Ag+mJaSgk83SRzCRRP",
	"y4LyLj7eOHpQC1HmGVnQFW4+XSKrd98S861lnSual4ZOWCrFcT4XilBHRhnMaJlr4icmJc8NmzKjOWon",
	"TJFCihXLIBsb7nuxYOmCpFTZIfA9csHy3NBgqSDro7X46rYcpo8hSgxcl8IHLujzRUa9rh2YgDVygyTN",
	"hYJEix3Xk79xKM9IeKHUd5Xa77IiZwsgOLl5YC9bxB03NJ3nG6JxXzNCFaHEX01jwmZkI0pygZuTs3P8",
	"3q3GYG1JDNJwcxr3qDm8fejrICOCvKkQOVCOyPPnrosyPmPzUoIiFwvQC3fnSVCF4AqImP4LUm22/b9O",
	"f35FhCQvQSk6h9c0PSfAU5FBNiEnM8KFDkjD0RLi0HzZtw4HV+yS/5cShiaWal7Q9Dx+o+dsySKreknX",
	"bFkuCS+XU5BmS/0VogWRoEvJ+wCyI+4gxSVddyc9kyVPcf/raRuynKE2poqcbhBhS7r+9sHYgaMIzXNS",
	"AM8YnxO95r1ynJl7N3iJFCXPBog52uxpcLGqAlI2Y5CRapQtkLhpdsHD+H7w1MJXAI4fpBecapYd4HBY",
	"R2jGnG7zhBR0DgHJTMgvjrnhUy3OgVeETqYbfFRIWDFRquqjHhhx6u0SOBcakkLCjEVo7NShwzAY+47j",
	"wEsnA6WCa8o4ZIY5I9BCg2VWvTAFE27Xd7q3+JQq+PpJ3x1fPx24+zPR3vWtOz5ot/GlxB7JyNVpnroD",
	"G5esGt8P0A/DuRWbJ/bnzkay+Zm5bWYsx5voX2b/PBpKhUyggQh/Nyk251SXEp6+5ffNXyQhp5ryjMrM",
	"/LK0P70sc81O2dz8lNufXog5S0/ZvAeZFaxRhQs/W9p/zHhxdqzXUb3ihRDnZREuKG0ortMNOXnet8l2",
	"zH0J87jSdkPF42ztlZF9v9DraiN7gOzFXUHNi+ewkWCgpekM/1nPkJ7oTP5h/imK3Hyti1kMtYaO3ZWM",
	"5gNnVjguipyl1CDxjXtsnhomAFaRoPUbR3ihPv0QgFhIUYDUzA5KiyLJRUrzRGmqcaT/LWE2ejr6X0e1",
	"/eXIfq6OgslfmK9O8SMjsloxKKFFsccYr43oo7YwC8Og8RGyCcv2UGhi3G6iISVmWHAOK8r1pFZZGvyg",
	"OsC/uZlqfFtpx+K7pYL1IpzYF6egrARsX7yjSIB6gmgliFYUSOe5mFY/3D0uihqD+Py4KCw+UHoEhoIZ",
	"rJnS6h4un9YnKZzn5PmE/BiOjaK44PnGXA5W1DB3w8zdWu4Wq2xLbg31iHcUwe0UcmK2xqPBiPl/F7kR",
	"VtQhKA/Vi4UbEA+ZhqXaST1daPCs2s2kUtLNyN33Cd7bXaL6RYGlp4LOGUdox0YS5mRJzw0Xplwg8g3Z",
	"gKpEXEt5VhiorGFOfHAi/KSjMn/mtB3bVC9QGIEjZ0qjemReVGQBOco/Rj20I3RI5NCksZMgWpRQcSLz",
	"+6CPvwwuFOK2n/+gLu4wZ9Vg/CXQf++2mEuXtziL4IQct7+9HGcxo8R5yqVoZQB32ILHCoUXkhYWQPfE",
	"iluMox5vX7KwXvHCHXgXRmEO2HxAawjVpc/azvMQhQRJoQXDd7lIz/9O1eIAZ37qx+oeP5yGLIBmIMmC",
	"qkWEy7aOVz3akCNmXkQmR6bBVJNqiYda3o6lZVTTYGkO3rjkalGP3yHTAxlRb3/G/9CcmMfmbBvpwA47",
	"IWfIwJQ9zs4Pldlr0BwKO5N5AQ1VgiytDYgUND3fC8pn9eTxfRq0R99bs5PbIbeIaofO1ixTh9omHKxv",
	"r0Id5uS5Vfq93NK5+ZtSSWztdq4hCDgTBclhBXkbBMuycDSLELE+OF/4TqxjMH0n1h2eINZwkJ0w4wyW",
	"Cr8T6+cOMiF3Yx7HHoJ0s0Cj7ilkDzyUks0stUPjeCrk5dhxi89yUrtpCDWjBrfRuIUkfLUsEnc2I6Ze",
	"+0JroNozvp2LtoePYayBhVNNrwELyox6CCw0Bzo0FsSyYDkcgPQX0VtwShU8fkRO/3781cNHvz/66mtD",
	"koUUc0mXZLrRoMhdZ88gSm9yuBfVRdDcFB/96yfeuN8cNzaOEqVMYUmL7lDWaWBlQvsaMe91sdZEM666",
	"AnAQRwRztVm0E+sPM6A9Z8qInMvpQTajD2FZPUtGHCQZ7CSmfZdXT7MJlyg3sjyE+QekFDJ6dRVSaJGK",
	"PFmBVExE1OjX7g3i3vDyftH+3UJLLqgiZm50l5Q869GW9ZoP5/t26LM1r3GzlfPb9UZW5+Ydsi9N5NfK",
	"cgEy0WtOMpiW84ZqOJNiSSjJ8EO8o38EbeUWtoRTTZfFz7PZYXRngQNFdFi2BGVmIvYNIzUoSAW30UM7",
	"1FU36hD0tBHjzdq6HwCHkdMNT9E2f4hj26/JLxlHR6Ha8DRQ6w2MOWTzBlleXX3vQ4ed6o6KgGPQ8QIf",
	"o3HwOeSa/iDkWS32/ShFWRxcyGvPOXQ51C3GmR8z8603KjA+z5sRa3MD+yS2xk+yoGf++Lo1IPRIkS/Y",
	"fKEDPeu1FGJ2eBhjs8QAxQdWS83NN11d9ZXIDDPRpTqACFYPVnM4Q7chX6NTUWpCCRcZ4OaXKi6c9cQ4",
	"YXAFxoToUN7TC6t4TsFQV0pLs9qyIBjx0Lkv6g8TmtoTmiBqVI+/t3LU27fsdDZ+JpdAsw2ZAnAips6p",
	"6ty9uEiK4RraizdONIzwiwZchRQpKAVZ4ix1O0Hz79mrQ2/BEwKOAFezECXIjMorA3u+2gnnOWwSDC5S",
	"5O5Pv6p7nwBeLTTNdyAW34mht7J7OM95F+ph028juPbkIdlRCcTfK0QLlGZz0NCHwr1w0rt/bYg6u3h1",
	"tKxAog/7WineT3I1AqpAvWZ6vyq0ZdETMuvUWyPhmQ3jlAsvWMUGy6nSyS62bF5q6OBmBQEnjHFiHLhH",
	"8HpBlbZxF4xnaAu01wnOY4UwM0U/wL1qiBn5V6+BdMdOzT3IVakqdUSVRSGkhiy2BvQb9s71CtbVXGIW",
	"jF3pPFqQUsGukfuwFIzvkGVXYhFEdeV7cn7H7uLQQ2Pu+U0UlQ0gakRsA+TUvxVgNwwb7AGEqRrRlnCY",
	"alFOFas4HiktisJwC52UvPquD02n9u1j/Uv9bpe4qK7v7UyAwmhF976D/MJi1gaMLqgiDg7vCEYziA0Q",
	"6cJsDmOiGE8h2Ub5qOKZt8IjsPOQlsVc0gySDHK6ibiw7WNiH28bAHe8VneFhsRG/sU3vaZkH2i1ZWiB",
	"46mY8EjwCUnNETSqQE0g7usdI2eAY8eYk6OjO9VQOFd0i/x4uGy71ZER8TZcCW123NEDguw4+hCAe/BQ",
	"DX15VODHSa17tqf4Jyg3QSVH7D/JBlTfEurx91pAjw3VJVUE56XF3lscOMo2e9nYDj7Sd2R7DLqvqdQs",
	"ZQXqOj/B5uCqX3uCqN+VZKApyyEjwQOrBhbh98TGrLXHvJwqOMj21gW/Y3yLLMcHlDSBP4cN6tyvbTB0",
	"YOo4hC4bGdXcT5QTBNSHWBoRPHwF1jTV+cYIanoBG3IBEogqp0umtU1yaKq6WhRJOEDUr7FlRufVjPoU",
	"t7pZT3GoYHmxiCirE2yH76ylGDTQ4XSBQoh8gIWsg4woBIMCYEghzK4zl2/hI+49JTWAdEwbXdrV9X9H",
	"NdCMKyD/FCVJKUeVq9RQyTRCoqCAAqSZwYhg1Zwu1KXGEOSwBKtJ4pP799sLv3/f7TlTZAYXPknJvNhG",
	"x/37aMd5LZRuHK4D2EPNcTuJXB/o8DEXn9NC2jxld6iFG3nITr5uDV55icyZUsoRrln+lRlA62Suh6w9",
	"pJFhYSY47iBfTsNl31037vspW5Y51YfwWsGK5olYgZQsg52c3E3MBP9+RfOfq88wAQtSQ6MpJCmmDQ0c",
	"C87MNzbTyIzDODMH2EYZDwUITuxXp/ajHSpmHaXHlkvIGNWQb0ghIQWbYGMkR1UtdUJs6G26oHyOCoMU",
	"5dwF9tlxkOGXyppmZMk7Q0SFKr3mCRq5YxeAi/f3OVZGnAJqVLq2hdwqMBe0ms+l1Q25mYM9aHsMok6y",
	"8ahX4zVIXdUar0VOM1FswGXQkPcC/NQTD3SlIOqM7NPFV7gt5jCZzb0ek309dAzK7sRBqGH9sC/a0Kjb",
	"+eYAQo8diEgoJCi8okIzlbJPxSxMCnV3mNooDcuuJd9++nvP8XvTqy8KnjMOyVJw2ETrIDAOL/Fh9Djh",
	"NdnzMQosfd+2dZAG/C2wmvMMocar4hd3u31C2x4r9YOQh3KJ2gEHi/cDPJA73e1uysv6SWmeR1yLLmWs",
	"zQDUuArKZ5JQpUTKUGY7ydTYHjTnjXT5ZU30v66inA9w9trjtnxoYTYy2oghLwglac7Qgiy40rJM9VtO",
	"0UYVLDUS/OSV8X6r5TP/StxMGrFiuqHecoqBb5XlKhqwMYOImeYHAG+8VOV8Dkq3dJ0ZwFvu3mKclJxp",
	"nGtpjktiz0sBEiOQJvbNJd2QmaEJLcgfIAWZlrop/WNGpNIsz51Dz0xDxOwtp5rkQJUmLxk/W+Nw3unv",
	"jywHfSHkeYWF+O0+Bw6KqSQepPWjfYoBxW75CxdcjBUs7GMfrFmnaI/MMhtVGf6/u//59Lfj5H9o8seD",
	"5Jv/c/Tuw5OP9+53fnz08dtv///mT48/fnvvP/93bKc87LF8PQf5yXOnGZ88R/Wn9gF1YL8x+/+S8SRK",
	"ZGE0R4u2yF3MTXcEdK9pHNMLeMv1mhtCWtGcZYa3XIYc2jdM5yza09GimsZGtIxhfq17KhVX4DIkwmRa",
	"rPHSUlQ3rjGeGYtOSZfsiudlVnK7lV76tlk9Pr5MzMZV9rMtjPSUYGrsgvrgSPfno6++Ho3rlNbq+Wg8",
	"ck/fRSiZZetY4nIG65iu6A4IHow7ihR0o0DHuQfCHg2ls7Ed4bBLWE5BqgUrbp5TKM2mcQ7ncyWczWnN",
	"T7gNjDfnB12cG+c5EbObh1tLgAwKvYgVTGkIavhWvZsArbCTQooV8DFhE5i0bT6Z0RddUF8OdIaFO1D7",
	"FEO0oeocWELzVBFgPVzIIMNKjH5aaQHu8lcHV4fcwDG42nNW/kz/txbkzo/fn5EjxzDVHZtDb4cOsp4j",
	"qrTL2moEJBluZstEWSHvLX/Ln8MMrQ+CP33LM6rp0ZQqlqqjUoH8juaUpzCZC/LUJ4I9p5q+5R1Jq7eS",
	"W5CCR4pymrOUnIcKSU2etjpPd4S3b3+j+Vy8ffuuE5vRVR/cVFH+YidIjCAsSp242iKJhAsqY74vVdWW",
	"wJFt8aBts1ohW5TWQOprl7jx4zyPFoVq55h3l18UuVl+QIbKZVCbLSNKC+llESOguORTs7+vhLsYJL3w",
	"dpVSgSLvl7T4jXH9jiRvywcPHgNpJF2/d1e+oclNAYOtK7058G2jCi7cqpWw1pImBZ3HXGxv3/6mgRa4",
	"+ygvL9HGkecEP2ske/vAfByqXkCVjNu7ARaOvbMScXGn9itfRy6+BHyEW9hMFb7SfgW5vZferh2Z4rTU",
	"i8Sc7eiqlCFxvzNVeam5EbJ8NIZic9RWXSWuKZB0Aem5K5EEy0Jvxo3PfcCPEzQ962DKFs+ymXlYvgUd",
	"FFMgZZFRJ4pTvmnX0VCgtQ8rfgPnsDkTdfWXfQpnNOs4qL6DipQaSJeGWMNj68Zob76LKkPFvih8OQRM",
	"evRk8bSiC/9N/0G2Iu8BDnGMKBpJ5H2IoDKCCEv8PSi4xELNeFci/djyjJYxtTdfpJCW5/3EvVIrTy4A",
	"LFwNWt3t8yVgJT5xociUGrlduCJyNhE94GKlonPokZBDH9HAdO+GXwkH2XXvRW86MWtfaJ37JgqyfTkx",
	"a45SCpgnhlRQmWmF/fmZrBvSeSawNqxD2DRHMamKj7RMh8qGr84Wu+wDLU7AIHktcHgwmhgJJZsFVb6+",
	"HZYB9Gd5kAxwjYUVtlVcOgki1oJaf1U9Jc9z2+e0o126uku+2JKvsBSqlgOqJRkJH4PkY9shOApAGeQw",
	"twu3L3tCqYs81Btk4Ph5NssZB5LEgt8CM2hwzbg5wMjH9wmxFngyeIQYGQdgo3sdByavRHg2+XwfILkr",
	"UkH92OiYD/6GePqYDQc3Io8oDAtnPV6t1HMA6iImq/urFbeLwxDGx8SwuRXNDZtzGl89SKfwD4qtrTI/",
	"LsDjXp84u8UBYi+WvdZkr6LLrCaUmTzQcYFuC8RTsU5s/mhU4p2up4beoxHymM0aO5i2xNIdRaZijUFD",
	"eLXYiOwdsPTD4cEINPw1U0iv+F3fbW6B2TbtdmkqRoUKScaZ8ypy6RMnhkzdI8H0kcvdoCTOpQBoGTvq",
	"EuRO+d2ppDbFk+5lXt9q47oaoE8+ih3/viMU3aUe/HWtMNHCWL1misaJupHqPV37xVWqKtmPC1spaZ+i",
	"Sm1yaACxBauv23JgFK3NiKImXgOsxViJYb5d11cXbQpyQFUraYimyXnMH200RsB7/NR/FpiEcPco39wL",
	"wtQkzJnSULsmfPTJpzD6UqwKKsSsf3W6kDOzvjdCVJe/dc7ih41l3vgKMM57xqTSCfp1okswL/2g0FTx",
	"g3k1LoE2A+FsDW2WxTkuTnsOmyRjeRmnVzfvT8/NtK+qi0aVU7zFGLdhQFOs+R4Nj90ytY2g3rrgF3bB",
	"L+jB1jvsNJhXzcTSkEtzji/kXLQY2DZ2ECHAGHF0d60XpVsYZJDW3OWOgTQaRE5Mttm0O4cp82PvjIXy",
	"ydV9N78dKbqWwAyzdRUMnW/mSmQ6KJnezTfuOQO0KFi2blmY7ai9dgi6lxmp58LD3XWD7cBAM9oxGjze",
	"KNLpYiqdJe0I1Y4jIxjbIEsXQQgSRQybaZuVEk2VjRDGbkXYSlweuPaffj3VQtI5OHNzYkG60hC4nH3Q",
	"ENRbVUQz6zfO2GwGoZlVXcZE2ACubUyLdlUZQGRxW2zJuP76SYyMdlBPDeNulMUpJkILfc63s64524tV",
	"gTZfFUkNtuYSNuloXu5PsEl+NXofKSiTqo7Dc/blJv/bY9dXy59ggyPvDG8zgO3YFVT+3wDSYMzYWj1S",
	"QU3VO6pRPBgl/MYW7rFTx/FdOtDWuHLP/cRfB7s3yiE3l3KVg1F7Qw0sQ3bjNO6ENKcHmohvk/KuTWA9",
	"Js6QHAORK5yKKd8cq3sVVUnnu2j3DGjuiReXM/o4Hl3N5Re7zdyIO3D9urpAo3jGkDLrAmp48PdEOS0K",
	"KVY0T5xjtO/yl2LlLn983ftRb1iYjFP22ffHL1478D+OR2kOVCaVMta7Knyv+GJWZav/br9KUGLxtiar",
	"rAebX5UsDZ2pFwtwXUwCfb9Tbr12lAdH0TlXZ/HI1p28z/n07RK3+PahqFz7tdvJevab3ny6oiz3/h4P",
	"bU8UKi5uWM3+KFcIB7hyVEAQ3JEclN10Tnf8dNTUtYMn4Vw/Yw26uMbBXYU6ZEXOy08PLj39IGSD+bsU",
	"pGiUwPWJVUbItnjsCcr0nbHawtSEWMHr/fy9OY3374dH7f79MXmfuwcBgPj71P2O+sX9+1EHTtSSYJgE",
	"Ggo4XcK9Kpy6dyNu1uzE4WLYBX28WlaSpegnw4pCrbvfo/vCYe9CMofPzP2SQQ7mp90Zi61Nt+gOgRly",
	"gk77Uo6qaLKlbcaliODt4EnMdjOkhcx+SbGWvPWHdY8QL5foQ0pUztK4d51PlWGv3EZNmZcJvtxjMDMj",
	"lqwnCI+XLBjLvDakOGILyGCOKDJVtD5jjbupcMe75OzfJRCWGa1mxkDivda66rxygKN2BFKjenbncgNb",
	"V0E9/FXsIFtM/haI7UaQrS6U55VZ3y801odiz1DPcMYO494Spunow1GzTVtZNGOthukxQ5qyekbn/CU9",
	"c0SbrDKVzKT4A+K2aDThRzLeve+JYXzzHxCqZ2FrwQZLqfx6da/YevZd2z1cN+7b+Cvrwn7RVbOKy1ym",
	"8VO930ZeRulV8bqsDsl9Sljo5G3GAPewFjxeQdQb9gnwASCU2/Nk070bqSTxUxkmbR3Z8etT6WDuJLrl",
	"9GJKY00UjC5kYAq2txGqogXxH/sNUFUys52dBKGa1bvMlowqQNYVP7rlJy+p19hpB2s0tQKDFBWqLmPr",
	"Kc6ViAxT8gvKbX9S853lV+5rBdYLar66EBILvql4VE0GKVtGzbFv3/6Wpd0IiozNmW29WSoIeju6gWxb",
	"Y0tFrj9mlaLvUHMyIw/GQYNZtxsZWzHFpjngGw/tG1Oq8LqsPJLVJ2Z5wPVC4euPBry+KHkmIdMLZRGr",
	"BKl0TxTyqtiwKegLAE4e4HsPvyF3MSpOsRXcM1h0QtDo6cNvMKbB/vEgdsu61qnbWHaGPPsfjmfH6RjD",
	"Au0Yhkm6USfR2li2d3r/7bDlNNlPh5wlfNNdKLvP0pJyOod4IPZyB0z2W9xN9Ki28MKtNwCUlmJDmI7P",
	"D5oa/tST3GnYnwWDpGK5ZHrpYqeUWBp6qhs32kn9cLaLsGuo4uHyDzEEsfARWC1b1w2rMXTZk5yBgaKv",
	"6BKaaB0Taqv85awODvZtnsiJLyKKHWaqxjIWN2Yus3SUJTFWeEYKybhG+0epZ8nfjFosaWrY36QP3GT6",
	"9ZNIp5ZmMwO+H+A3jncJCuQqjnrZQ/ZeZnHfkrtc8GRpOEp2r06mDk5lb6xkPCquLzRv+9BDJV8zStJL",
	"bmWD3GjAqa9EeHzLgFckxWo9e9Hj3iu7ccosZZw8aGl26Jc3L5yUsRQyVhm8Pu5O4pCgJYMVpsbEN8mM",
	"ecW9kPmgXbgK9J82BMWLnIFY5s9yVBEIPJrbsmKNFP/ry7rEMTpWbcpRywYoZMTa6ex2NxzwtZ/Vre2/",
	"tTE7+KwHc4PRhqN0sdITAG0jnKtvbjhJOmrutXveMDg+fE+k0cFRjr9/H4G+f3/sxOD3j5qPLXu/fz9e",
	"aTRqcjO/1li4ikaM38b28DsRMYD5tl5VQJFLhI4YIPsuKfPAMMGpG2pMmi2Ubl6KOEyKTTzgL34K3r79",
	"DZ94POAfbUR8YmaJG1gHivcf9mYLuSjJZNXzINSYku/EeijhtO4gTzyfAYp6UDLQPIcr6bTIi7rrd8aL",
	"BDRqRp1CLoySGXb/CO35Xw6ezeLHW7Bdsjz7tS7i1LpIJOXpIhqoOTUf/m5l9MYVbFlltKHAgnIOeXQ4",
	"q9v+7nXgiJb+LzF0niXjA99tt2i0y20trga8CaYHyk9o0Mt0biYIsdqsj1PlX+dzkRGcp65eXzPHbq/T",
	"oAEb9gePHQ3bOBwVfHR2GeZr+38R4BlavybkR6xUYWBplCZGq5Mv+tgsgFYWuaDZGItRnn1//ILYWe03",
	"tiGz7T82R6NLcxVRK/nendf7Kh0MH2d76rVZtdJJ1S4sVkvKvFE3NGOt0Ak0x4TYmZDn1hKmvJ3FTkKw",
	"pKlcQhZ0J7O6GNKE+Y/WNF2gialxkfWT/PDGeZ4qawN8kMdTdavAc2fgdr3zbOu8McEW9RdMAea2wgqa",
	"5auqWm7OxOnLWTWXJ0vOLaXs07m+6k2xL9o9cFYg8b7hKGQtxO9pYLB9J/ftI3iKX0WLZ7ebEract74Y",
	"UtVd+aWzEaeUC85SLF0dE4iw1M4wb9OAKt9xN5EauRMaOVzRVohVVp3DYm9zRM8IHeK6ntvgqdlUSx32",
	"Tw1r1yJnDlo5zgbZ2Hf0dH4NxhW47iOGiEI+KWQkNiUaz175wfckI6yi0WOo+sE8e+XMmJhefs44Giwc",
	"2pyYbT0PuWLoYOSEaTIXoNx6mqXE1G/mmwlW1cpg/W7yQsxZesrmOIaNhjLLtqF/3aGOfSCgC7wz7z4z",
	"77pax9XPjageO+lxUbhJ+/u9xptcr3kvgmPhJz4eIEBuNX442hZy2xrBi/epITRYYfARFHgPdwij6n3a",
	"ajRuVARLUfgGsblJ0YKHjEfAeMG494TFL4g0eiXgxuB57flOpZJqKwIO4mlnQPOeOHbM9bOu1KsO1a70",
	"bFCCa/Rz9G9j3ba1h3FUL9SCG+Ub4g+Foe5AmHhG8yoCNtKEFaUqJ0RlmCPSassaYxyGcfvGz80LYEev",
	"93H9OVZP3/cm6qspNS2zOeiEZlmsGcx3+JTgU5/rA2tIy6ppSFGQFEuoNmvKdqnNTZQKrsrllrn8C1ec",
	"LuhzHKGGsNey32GsWTHd4L/7dOGvYl/3zm/zga7ZfoWUu/l6ManX0HSi2DwZjgm8U66OjnrqyxF6/f1B",
	"KT0X8yYgn8JI2sPlwj2K8bfvzcURFlrshBnbq6Wqg4ghvQKf+9IhVQWvJlfCq6zTFwad11X3++1miP4+",
	"9mO8/HpySkOTt71frRm4L7M07U2EptoVutGUbGVBvcVDbMhny4je9QT1hXnaKM/DGZ/dWrcitN8F81PD",
	"4WJDfWpm0etouZwvpN7gfZ0hP636ko19XXV83u5zfQ6u+l0hYcVE6YNofCirVwntr42u0VW6d3T90QDx",
	"T2187jWVn7l+g3aZTif/6VfrTCPAtdx8BobzzqZ3Omh3pV1rnqpfIVWrqkGtqxq34pCeA7Hy9k42bPTw",
	"3tGBvENWz4eIA92O4uPRSbbXhRlrkTCyo8SOXbw/eH8F6bpqNB6xQihWd4yLNQ4fGDN+hr2/gwrY3bF8",
	"LOEKUo1tAusYKQmwTz1sM5m33d9Wku5Xp6vQeldAelvV6G5vwB13fKcESVBGx/ZVmwyvkXxcRcLaRJ4L",
	"qrCjgEQbdzP1dXAC3mwGqWarHSVf/rEAHpQTGXu7DMIyCyrAsCodBeuw7m91rAHaVpFlKzxBP4Qrg9OX",
	"jnwOmzuKNKgh2uitysW6TAlOxAByh8SQiFCxSDNrSHbBP0xVlIFY8JGd9nOoi5n39ogOChhdci5Pkubi",
	"qIsabZky3qR20Fzm070KqGFmRV9VmG6Py3794zm2FFUuzolWJTxDLZ2cdBsdXLgSoFigp/Kd+GKgoPxv",
	"vhqXnSVn5xB2sUZP1QWVmX8janrxVp1ky33UKeXi+zO2gZ5VM7M6Dr/rq46UzsaUljQXRoxI+vKCmqHv",
	"VdzYHWUD/Oo6LAjXDKTr9o/yby4UJFr4uP1tcGxDhY1ivBQSVG+7CgtcbxHZN3WVXGzbQ7FoLHXBi+EC",
	"iYQlNdDJoJZt/5zbkP3MPve51L5ty04LU0Wvu/sH+gwMpjpIDKl+RtxtuTtH+zLGJsY5yMR7ntqFbTnI",
	"pjekkCIrU3tBhwejMsgNLoGyhZVE7TRpd5UtHSHIdT6HzZFVgnzjRb+DIdBWcrKgB6X7Wpt8UPObisE9",
	"Pwh4n9JyNR4VQuRJj7PjpFuNt03x5yw9h4yYm8JHKvf01CV30cZeebMvFhtffbYogEN2b0LIMbe5Id6x",
	"3WwH1Zqc39Hb5l/jrFlpC2Q7o9rkLY8H2WPpanlFbuaH2c7DFBhWd8Wp7CA7ar2ueyoBS3oR6TA9GaqV",
	"d13N7a6/NVFZKGIyyan1WD3Dgx4zHGEme1ByAR2ZlDhPF1G5iIVkXibb3gwVx1Q4GQKkgQ9J+q6gcINH",
	"ERDtYxs5hbaCmatdJmZEQu1EvmwRt27L3ZhG3565mqXJ72ZCQqN5rvlayMyLPEzVXa6pnDItqdxcptRa",
	"p+Vvx3rSi+Wd4VhVJFa9kDoaq4vDPBcXCTKrpKoYH1NtzXuqeRn7Jjn1d+ZUTyGI66LKCWobsqAZSYWU",
	"kIZfxNP2LFRLISHJBYZ5xTzQM23k7iXm6nCSizkRRSoysJ0X4hTUN1fJOUWxCYKomigKLO1g0qf9JqDj",
	"gVMeqt+0Lc5jF51YX2ZP4CkoV4zHYci+3IV3S6/mvXoenMzQIsQw1qWZe22lz7BjNezZsJrluTcY9PWs",
	"Jr+oEsORMPHGTPGELIXSTrOzI6lqqDrE624quJYiz5tGICsSz51l+yVdH6epfiHE+ZSm5/dQj+RCVyvN",
	"xj4ttR2MV88kWxWZBjbXPltE7Lw4iz91e3fQdpxj78a3AZjvdnOs3Tbu41iD8Oa62h3veU/tTC2WLI3T",
	"8JcV3dYbkxZjCdFST7b3lE3Ox9eQUYeXQxXMgCypi2bghmBj++V4mnPqIvMw/0WJtz0umYG7JHoupi6f",
	"dFJLkvbKVi0AEFKbMapLaRtWhZJPxVXE3GaYo0u6DehALo6RP1eDzYxwcKA0XAmoTrRhBeBdq+yPbUku",
	"G7k4FWv//F5ds+tSwH/cTuWxJv+RU1yRlrRBVb6+Rw9HiFcG3hp/hO3Y/Q26Owqpai448EYNAOiPS2rA",
	"MCg6aV8wZpTlkCVU91zuaBMaB5qty2hpt4xlynHylNoLewHEjF1KcPUmrEjdajFfUENKonq9a7nlGaxB",
	"YTEI2yebKutn8P4OyG2zrpbyLYokhxU0wrVcEYwSRTu2Av+tqj4mGUCB3r+2TSoWhxTe5S1DhVt7EkSy",
	"DMFu1HJhEWt3iuwwS0SNKGue2GOihh4lA9GKZSVt4E/tK3I0zW7mKEdQ1ZHJE6+3DZ3mFzvCGz/Asf8+",
	"Jsp4TLwbxof2ZkFx1G1jQDvjEkvVd+p5PCwxrPBSOTRwtqxyfFoSr/mGKugF7zcAdkm+Vm8G7hMTPEDs",
	"92tIUappxt1dHScEByOqVb2pVwSX1Q5f3pD8SWh4Kwn3jhdTNRQgg91qqfF04QR2fAGbhHIj9hqpGRtz",
	"Of7v+N+YTEs/kNGrbZ+wUIN7Dt5jhwWlK2eFE2hZdaH5+MKxqyfYVspZEFm9pBsiJP5j9LV/lzRnsw2e",
	"UAu+/4yoBTUk5FyE1nft4hXNxNsFk7EHzNsFhJ/KrpsNHTMYbmNGCYA2V6AzTmFloHMItwHd8pbzpNqw",
	"HFVOl0wpvOxa29nFglu8rwmxpFmoI2NlumaDVl+r1Hz9/9RZW+FUvqBUkdPUd4UDouiyZRC3nR89cekF",
	"LLen9XXVY08CVTfJmmilT+fNLmHc2zNyIxYr39fvoQF2p8tep9XFlZaxT9vnOjN6S0LkoKUceheGxod0",
	"gA57c+0CP2xVdjP4jxaN7FvGEPA/F7z3NCcM4bV9CG8Ay42U/wis1q46FetEwkztCoWwhlWjCMu6WIA3",
	"TjKeSqDKxoac/OxUtromIuNGhbTRi5X3rRolgxnjNbNkvCh1RAPA0oh8EyAsNE8jWnucPX1SghHDVjT/",
	"eQVSsqxv48zpsG28wpr03iTvvo0o/9Wd2h2AqVr7wUxCqDPVgtfMBW673tjAQqUpz6jMwtcZJylIc++T",
	"C7pRl/d9GGhlaeSLHd4PGkgzzfz2wA+CpG0ByTfOfXlFz0QFID2gi2KAawEjWCNuBWsU0aLHk9CFIV5W",
	"ga6TXMwxv6yHAF3xSfT9WGVFcDTYWnlov3kU+wO2T4N1t93B1wJnHTLF9nP2M6IOFZ5fONNbT5q1prUT",
	"/mxEpj0Inv75vA4Lt5vTpf9YjuYZJjE08jTbrfz9XtvwEDsf9Hgymhbcnl1EB7lL8A3NtcP7GTV98LFM",
	"UKvDJqjbqi2B36DqIGeausCdrtGnoxRbpIxdHu2eNiFrSfb3QA94tv+vO1vNaatgCjPOPk2gtmfOJoUo",
	"knRINKAtzZ85g7aDtAljD30E5uqedVeBE6pqVtEobNLoWrFvH6zerhm7/DJFuk3J7jNo9HDQprFczJCX",
	"2e64aIfBHI/KeDFuZx81DTYVkyCUSEhLiQbNC7rZ3VeopyTs6d+Pv3r46PdHX31NzAskY3NQdVnhVl+e",
	"OmKM8bad5WZjxDrL0/FN8HnpFnHeU+bTbapNcWfNcltV1wzsdCXaxxIauQAixzHSD+ZSe4Xj1EHfn9d2",
	"xRZ58B2LoeD690yKPI+Xda9Et4ipP7ZbgbHfSPwFSMWUNoyw6atjuo6VVQs0x2Fxz5WtMyJ46qqvV1TA",
	"dE8wTmwhfaGWyM8w69f5Nwisi9zxKuuT2LYupxdZixgGZ2D8xhRIIQonSrMZiUGEuSUyyLl0hkYM7wyi",
	"Jytma+MoY4ToYpLjpHfMneYpZmQ7t292a9RxTm82MSJe+EN5CdLss6T3Z7RfhpPUpvTPhn9EUvQPxjWq",
	"5V4Hr4jqB5drfDwItG66doQ8EICePMxGBl3YF72uNCqtVR7t997V2RY/XtYu0J0JAwiJ/2AHeGFiZf1e",
	"FePuwPnEJTtfVkgJlvKujxIay9+Vq+lZb3WRBFvkjBRag7JsSXTFwiARVz2r8lt7tJJOGiw2QTeaaZ5H",
	"0met3QTPVEg4RiWQK5rfPNfA7vjHiA/I3vQnzYQ5lCGSLSrV5Sq4vaCD5g7yJQ83NX+NKbv/ALNH0XvO",
	"DeXcxZ3bDK1e2JJ67m8FmwVMLnBMGw708GsyddX0CwkpU2039IUXTqqUQZBs5kIvYa135CjuWuevQl+B",
	"jGc+ZoS8CtxJAs12NYT1Ef3ETKXn5EapPEZ9HbKI4C/Go8LumzuuiytWXr9cQZCgtNeeBUG6fUWHLs8W",
	"vTCXTqmgu87Bt3UDt5GLul7b0Go2gwu4v337m54OKUITL7ZuPscqOAepur5XzfVrqH9jceTGcPPGKObX",
	"voqotupnT/Hd1n6ULN8ZINIopfxxPJoDB8UUFgv+3TWHuNm71ENgc/K7R9XCepVCIhYxkbU2Jg+mCook",
	"D6iP7D6LVEPGfLe0lExvsDGoN6Cx36OVen6sqj64qiGV78rdfVqcQ9Wcua4RUSp/u/4oaI73kXWpcXML",
	"iXxCvl/TZZE7czD59s70P+Dx355kDx4//I/p3x589SCFJ1998+AB/eYJffjN44fw6G9fPXkAD2dffzN9",
	"lD168mj65NGTr7/6Jn385OH0ydff/Mcdw4cMyBZQX7v76ei/k+N8LpLj1yfJmQG2xgkt2E9g9gZ15ZnA",
	"xnUGqSmeRFhSlo+e+p/+X3/CJqlY1sP7X0euActooXWhnh4dXVxcTMJPjuaYFJ5oUaaLIz8PthNryCuv",
	"T6pochv3gjtaW49xUx0pHOOzN9+fnpHj1yeTmmBGT0cPJg8mD13vWk4LNno6eow/4elZ4L4fOWIbPf3w",
	"cTw6WgDNsYaK+WMJWrLUP5JAs437v7qg8znICSYM2J9Wj468WHH0wSXHfzQzRP1ttpR2UD/ZN0oqymnO",
	"Ul+GiilrCLYx3SpsA2kt5KUak6ltFOrDRnmGoT0231yFzXJPMoMw+/lJzbR8r1P0x46e/hYpWORzDXwL",
	"zjBYKwjj+q/Tn18RIYlTb17T9LzKs/CJNXUyUZhXY76cePr9dwlyU9OX43xVI3/MYyiXhom4hI2lmhfN",
	"2p21VBWz+nRw7Wc2ZBEQdlXKomZcaOILIKnZsGGtD5Jv3n346m8fRwMAwboqCrAj23ua5++tmQzWGMvZ",
	"ilgZ98USjevSCPhBvZNjtEhVT4PP63eaJa/fc8Hhfd82OMCi+0Dz3LwoOMT24B32DENiwTP36MEDz2ic",
	"GB9Ad+TO1GhgZ3Zf5d16CapRPElcYqAuQ7KP3lTVDyUt7Fl0T2ympvPT2Jcmhu88OeBCmzUar7zc9nCd",
	"RX9HMyJdhiou5eEXu5QTbmMozcViL8CP49FXX/DenHDDc2hO8M2gIWf3ovmFn3Nxwf2bRvgpl0sqNyja",
	"6IoXtjtI0LlC5yiySHu2gwJbfD5697H31jsKgwWPPjSq42RXuhOtt6TRf2XHNXlH9XFOHMvmQbkf7h4X",
	"BcZKnlbPj4vC9vfFeABgePvBmimt7k3Ij+HXDSeHhcT6OLw5xdx6Vbtb30S34fMOGudFL+1G3vnt/f1p",
	"7+/jprGj0Zc+BkzjFGyFqRN1dNULtJuWElTB2TeQuKqA7ESLxDVJGjiG77p/sA5gA4pf2JnexVTBnYz6",
	"Fnc9uOsTkwJ4K4mpbj92M6zZF1OtbpLGlXGNjPsLF/pe0tzQSbDcVtOSk+e3wuBfShisii7OrXRWFAcQ",
	"D33Gw65Xjj64QoKHkBpRPR4kL4aad/BtELR+t8Vx7k3Icfudy7EVV4hxpyRo3ruVAT8HGdBWstwl/Tk6",
	"/qRyX5gvtU/6UkNgMb8P+vgLF/T+wsjqlewMpLtlukuwz4685pj1tbHVP6Wc5pB2K6H9pSW0qjzylWS0",
	"MIb1yKXvBxLblQx8bQMe05Uk1iyRHXA2rHCBiez2CI/reH3DYmwgsgtBVmOvPKLH1eqVdrPGHdWyK2L9",
	"CKEO+93m5Pku6eoLMgUN7nQbuQXie3PdvDTqmXhzM56JYbzpyYMnNwdBuAuvhCY/4C1+zRzyWllanKz2",
	"ZWHbONLRVKx3cSXeYktVTTRzaBs8qip9OQ6em7dtIMddTJVt9ka6NyHfuVfr8hkuFXwuDKPyKV9Uzu1H",
	"htcZZJA7/s+nOP6dCfkBExm1GmM8GmZI4IuM66cPHz1+4l6R9MKGe7Xfm3795Onxt9+61wrJuMaQAavn",
	"dF5XWj5dQJ4L94G7I7rjmgdP//uf/zOZTO7sZKti/d3mlW2m+rnw1nGsyF5FAH279YVvUkxbd01ud6Lu",
	"Rjz834l19BYQ69tb6JPdQgb7f4rbZ9okI6eIVsbORruVA95G9pjscx+N3f2D2RjVZTIhr4TrfFXmVNrC",
	"Kli1VZF5SSXlGiCbeErFVDplO/2kOcMaAJIokCuQiWJVdeRSQlX9o5CwwjD6uq5oA4LdjB6DbT9bJv+S",
	"roP892l1TWvhloxmzyVdE2zloIkCPbalx9bk22/Jg3GtveS5GSCpEBNjrku6Ht2g1a8itqH1dJ477Ai5",
	"O4YXxx5iQaqln6qkYa1q/NU59xcruVtydxt7IM65t+OnduyEdgTXX2qrBcEKdhoL8KqyKPJNXXrVSHle",
	"hIqzODPDUOPAZ+wj2GmajiqhbfTeHuJbI8CVWEmboPZkG5iYqo4+oF4e8ozOucXEur+WuzTwHUmx9M4j",
	"QWag04XL6W2hPsKepMsr7OdNS8bZ0kD5YHztUg3uYrdwcNjeN6M2k35IB6kg3RIdeCAjRPyzb3hvHrOZ",
	"rSbue0z4MoDomnIFmauemlb5tl12Xci/T/0taKNH6G4on9WTdwUyRMsh/J+3CN4PwR3m+L0rW2CPl1vE",
	"nyEpwKuSCXkl6sxyq0H9KV2P13mzX/eCXgkO1sduJF9Li7fu1ErsMIzDIsWXFLH6S93R6bIiyJEvxbNV",
	"Dvm7eWmHLDLk9sayPl/iFf73aMGixi1j1jbZWS+hHm0IczYv2kYCYUWTyafUYj4JP/0MVZtPwbFuhsXg",
	"IfV8xokF/LBMB6v0WGI+qvrK93GgF+blQC6zhYsGcyMtqjA0iJQHIlPIBZ+rz5MVbaOOOF4iVGKLUdl+",
	"JJ31T/6CZ/eZaxbi+7W7klCK8RSIEktAlcHI6NjAwgZLPnnwt5uDULOlb87Mw/TWT8xdvnrw+OamPwW5",
	"YimQM1gWQlLJ8g35hVdNQa7C7RShbs9Da3CEOTCO3qZm6bA0rHN0eSbYCF37oNcs+7ibGQa1Fvfkg4wH",
	"fDCskE6LAqi8PAPc7bpqdxA9eR5GB4uqGonflR5QDIr2DJD/P6OBdifMjBczd/mV3ALqC4Q5NuFCd8Vs",
	"XAXHGClAzJ6St/w+UQvq61e6Px999XWP5czM4+r6dG1n9UDmsR1miAHtizYHHlZqr/D79KZ3e79NHI9Y",
	"to61Ls9gHdSFb3Y4dGLZHUUKuvFhtJ06VUW8VmUlDYTDLsGI8WrBipuvh6g0m8YLwnr1p+qUe8K/q7Rg",
	"W7TPCN/Fp6iDNx5pCZBBoRc7y2PiW/VugiuUyZRraWCLGI4Jm8DE1virW71kc1BWo6YkBzqrerYIMSR5",
	"IuAzhtA8VQRYDxcyRCeN0g/WFEGivHnltE4ysBedR55s3TmfVNDVn0pJTVBHBe4FmyZaPp1MicWwx4G7",
	"u5BCi1TkNnalLAohdXW61WSQuAd9bruGtNdHuFcS5tYsUzvtaGf41gEMaU3KVl+MHe3MoylmSIst6pJF",
	"++q5hrC0M1GQTodeA8In5Wu3RrcYP2vZ3L50k5vuJb0DW+BSqtNFWRx9wP9g0cKPdaIUlnNXR3rNj7Bh",
	"1tGHrSFNyFJzI5tIWwm+oUdH+313zXr4eV11/gch261Nd4YstZA2bl/6tvkXxj5F2OP1aJN/aSVsq72y",
	"teFXd8FFRuyc1yoPOGhhVNFu0MvAp/baBmYREr51GX9eC6qNuDPGM0KDbWzZmqomw14H+NsXu+hPYRe+",
	"eT/5V1/wOXslNDlZFjksgWvIrhZtSNoczt8eW6/b/QQDd/V3QxK7d3544/tA6koW2XnB76H3BKUjwE9H",
	"JdZyMHf19ag7tzf5532TP/NV1BtkeHsvfzn3svTh37dX8Od/BT/+YldzjY7jgVeyv4kufQ3XmvieF3JH",
	"GHA2rJbhYJtfGVXv9irVD0L6jj23t/gX6hS1Ozk4yXKIhWaXJdZNeYhQ/88K+mF2hjyPWBr6DurYti/T",
	"C2BYJEukDFsinGRqbA+xM064U3wr+HzWgk+w17dyz63p4QszPfRIOU7rz/Mhgsa+AtBqKTLwjlUxm7mi",
	"lH3ST7OdliFPpemyIPbLqJRjnbBsCafmzZ/tFAe9YmuwW2JRCzyDLAWp4JkaEMXhRr3sPYSOpn4Abtyz",
	"We2Ah8WVq5hcmmTfBDWvOpRA2shX2AbNF+d0yMhgRQwBTg5Atkcf7L9oTiuEiqzm1BNwZ2Puum2x1Ubt",
	"uA0AyWsUQm3ZUv+VmJEHtuhoyTGzsO53iv3J5cYIqr7GkgSak7SRUVTB0T05p70nZ6cq0Fldz5riuoCo",
	"T+ghIxha2Zw/3fgBeEa5I/kugrQglHCYU81W4F3+k9sKIJe+zVz9jS0McExoltnTWG8CrEBuiCqnysg6",
	"vBkYfkc1z8seDAPWBUhmrmia1w54qyYc2fIe2+KITu0bV7y0WrzIFhWRzahFf7O6kiNiRl6yVIrjfC6U",
	"j0NVG6Vh2ekm6j79vadItDckdGNWBc8Zh2QpeKzH5c/49CU+jH2NJVL6Pj4zD/u+bd23TfhbYDXnGXIn",
	"XxW/n8npv1KgS2u1EgohjXY7tX23Lf3veZT8odnwtHuSNjwNnFruYTBQ2BGz8fORT0do9MeMvvmh8acr",
	"A+TeVItSZ+IimAVtADaccUgFkKBL/yVsbq1u9+p6rW7X6W0K8BA7W9XTSN/D+mF/68O/aOabc86ERIJB",
	"6alYgVQtRe42/e1Plf42eN/34sa2z+8ujlaqw8our0QGdtxmm+1Y5XkuMnDtiLsiSxUWGU8Z8vdX/V4r",
	"iSOl5XyhSVkQLWLpIvWHCU0tk02sIhSfMKj1aNUlnG5BV0Bojk2eyRSAEzE1i65vUlwkVVht0+ecuODP",
	"qNAUwFVIkYJSkCW+0v4u0KomzxiqrrfgCQFHgKtZiBJkRuWVgT1f7YTzHDYJKsOK3P3pV6Na3zi8Vmjc",
	"jlhb4y+C3qqOkJMLu1APm34bwbUnD8mOSiBeNMAUObEscnBJchEU7oWT3v1rQ9TZxaujBbPI2DVTvJ/k",
	"agRUgXrN9H5VaMsiMfd3F8Rn9ukZW6IkxikX3gIZGyynSie72LJ5KVyLMisIOGGME+PAParpC6r0G5cv",
	"nWFtLXud4DxWxjZT9ANctfWPjfyrfRgbOzX3IVelIm4EnwMFWWwNHNZb5noF62ouTFj3Y1dJVtYWuGvk",
	"PiwF4ztkBe0GCNWB398MF1kcWiqpM2V0UdkAokbENkBO/VsBdkOHfw8gTNWItoSD5ZNDypkKkQPlNldV",
	"FIXhFjopefVdH5pO7dvH+pf63S5xUV3f25kAFSbAOcgvLGYVmnIXVBEHB1nSc5cjN3ft47owm8OYYG2L",
	"ZBvlo3HXvBUegZ2HtCzmkmaQZJDTiNHlF/uY2MfbBsAd9+SZrISGZAozISG+6TUly15jUjW0wPFUTHgk",
	"+ISk5gga5bkmEPf1jpEzwLFjzMnR0Z1qKJwrukV+PFy23eoeA5YZw+y4owcE2XH0IQD34KEa+vKowI+T",
	"2nzQnuKfoNwElRyx/yQbUH1LqMffawFtw194gTVuihZ7b3HgKNvsZWM7+EjfkY2ZGr9It0A7yukak+ya",
	"ptZAAZxcRrk9uqBMJzMhrSCd0JkGuTN0/h+Uece5T98VruoKwRHcvenGQSYfNvFxXMSCQNx1YUhkQs4W",
	"IMHcYZQ8JEvGS22fiFKPbc1RCTRdGKE9tMHakbANo2tMKGFOZZZji75ZdW8KiZcR060LHoGO5CM2NX6z",
	"7h+EHFTJuFmvizJNSq5ZHnRzqPT2z896eWuRuLVI3Fokbi0StxaJW4vErUXi1iJxa5G4tUjcWiRuLRJ/",
	"XYvEpyqTlHiJw1ds5IIn7WDK21jKP1Up3+qq8gYStE5cUKZdb2JfpaDfbrGHIUgDzREHLIf+6G4bdHr2",
	"/fELokQpUyCpgZBxUuTUqAaw1lWnzGYPZt8d3rbbte2dqYLHj8jp3499xdGFq4zZfPfusY1XI0pvcrjn",
	"etEAz6wk6pvSADdIdz1pqL8SfEdN11+U5RgZr8j3+PZzWEEuCpC2mCHRsoy0pD8Dmj9zuNlh8PmHmdyF",
	"2r43o70fN4xeDm1LWngx36+VKkJtxiV5HuRgvp/RXMH7vjRMO96SFrGmltXFZ01ByEy+E9mmdULMrh3h",
	"BjbPRl13lHEqN5EqUd0UiDZpaGHYlSOsri3r48Gr43aJtktmuygsJq1LUNFzvI3Ko2Vhqw3rDGUTdWct",
	"OhnFckzbtVBHFYCDCgNimoTdE/LGfvdpywAiRO6I1cz8s4libL5ZMQ181ygRjvV8qbkEHvHR04tnf2wI",
	"OytTIEwr4gvs7r5exqN1YkaaA08cA0qmItskDfY1atxCGVNUKVhOd99EIf90bdzd5WOebL+nPs018jxY",
	"3DaeHBLNOnEMuIc7bzQM5s0VtnBEx54DjF83i+5joyEIxPGnmFGpxfv2ZXr1NJtbxnfL+ILT2JIIGHcF",
	"ydtMZHKNjE9uZMn7ed73a0hLA1x4ku+idR5dcrDWDSdrBtNyPsd29B0fnVka4HhM8E/ECu1yh3LB/SjI",
	"Dl61KL5qknp7uC53CfLG7/rKjPdwOyjfoDNjWVC+8S5fSBRblrnFoe3keVhGa2uGx0pM17a/Pqv2a2/y",
	"C2y37qpt/m7RQi6oInZ/ISMlz1zGU6e29ZoPr3Nihz5b85pNb61pYtcbWZ2bd8gV4Xe5mWquSAEy0Wtu",
	"D1TjMLkOBvbkTm7bcP81rg2bqA49DLZbjb9mCAe6PWTA1/D6CHou1Yl5jU5MtJlO2HiGFo3+FJewOZN9",
	"86CBJZ3hm/EltbnF+U8hLwglac7Quyq40rJM9VtO0X8TLGzSjT3xhup+3vfMvxJ3IUY8fG6ot5xikFHl",
	"1YnywBlEXBg/AHgWq8r5HJThoyEBzQDecvcW46TkRgsTM7JkqRSJTa0158vILhP75pJuyAwrmgjyB0hB",
	"pubWD3bd2pKVZnnugl3MNETM3nKqSQ5UafKSGQ5shvPlFKqQM9AXQp5XWIj36pkDB8VUEjfM/GifYjsc",
	"t3xvAERjpn1ct7G42T44HnaW9UJ+8hxj1LAac86UruMjOrDfmG98yXgSJbKzBRAXLtamLXIXa8A5ArrX",
	"dBzpBbzl5vbTgiDHp/py5ND2AHXOoj0dLappbETLUeTXOkj9OwiXIREmc+t2+ROlkAZ04D2buPG2vn5r",
	"7/d0sTSuXOCZedpzIdunrn1iz0tOgWgYyVoFbtwbZw2Qt/ovvvyykofXJT0aD6ZNdgfssqtmgzzEm9/w",
	"MaG54HNbV9FolwL3ifGi1BgAfp0GPFjRPBErkJJloAaulAn+/YrmP1effRyPYA1poiVNIbEWhaFYOzPf",
	"WDrFRoOcaUbzBLXqoQDBif3q1H604z4Ouo0ul5AxqiHfkEJCCpktRMYUqfX5iS3QQNIF5XO8uqUo5wv7",
	"mh3nAiRUjRmNCt0eIl4IZs0TW5SuC+MxsbbQsG4v0HQRaRyDF5zR2T1BZY2eVAP3oFFytE9JH496BW2D",
	"1FUdOmeR02QzA6SIhjwQ4Kee+BA1Wm+J/pbov3Sij5VURNTNWtYKi69wW67ZrHXdBURv0Er2SaoL35bo",
	"/7OX6PccSBFKJG3oIPHecFQRpskFlkWaAjH3V4nWeddwz+nrmGkXHHVXaVO59nzpgjLuaupUeQ0Ih3bd",
	"4rVvT3sthk3LzNCiadABaSmZ3qDWQgv2+zmY/78zYr8CufIKTSnz0dPRQuvi6dFRLlKaL4TSR6OP4/CZ",
	"aj18V8H/wesihWQro199RLCFZHPGzZ17QedzkLUJcfRo8mD08f8GAAD//9Meg1uCrAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
