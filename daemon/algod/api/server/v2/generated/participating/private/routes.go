// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8Ie2ZfTkycmjycf/FwAA//9Wy0S/Bw0BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
