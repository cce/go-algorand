// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
