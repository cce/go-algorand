// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address basics.Address, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithOptions("simple", "participation-id", ctx.Param("participation-id"), &participationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3Mbt5LoX0Fxt8qPJSnZsbMnvnVqrxLnoY0Tuywle/dYvgk40yRxNAQmAEYi4+v/",
	"fguNx2BmMOSQou2kNp9scfBoNBqNRj/fjTKxKgUHrtXo2btRSSVdgQaJf9E8l6DwvzmoTLJSM8FHz0Zn",
	"nNAsExXXpKxmBcvINWymo/GIma8l1cvReMTpCkbPwiDjkYTfKiYhHz3TsoLxSGVLWFE7rdYgTd83Z5N/",
	"nE6+ePvu6d/ej8YjvSnNGEpLxhej8Wg9WYiJ+3FGFcvU9MyN/37XV1qWBcuoWcKE5elF1U0Iy4FrNmcg",
	"+xbWHG/b+laMs1W1Gj07DUtiXMMCZM+ayvKc57DuW1T0mSoFunc95uOAlfgxjroGM+jWVTQaZFRny1Iw",
	"rhMrIfiV2M/JJUTdty1iLuSK6nb7iPyQ9h6NH52+/5dAio/GTz9LEyMtFkJSnk/CuF+FccmFbfd+j4b+",
	"axsBXwk+Z4tKgiK3S9BLkEQvgUhQpeAKiJj9EzJNmCL/efHyRyIk+QGUogt4RbNrAjwTOeRTcj4nXGhS",
	"SnHDcsjHJIc5rQqtiBbYM9DHbxXITY1dB1eMSeCGFt6M/qkEH41HK7UoaXY9ettG0/v341HBViyxqh/o",
	"2lAU4dVqBpKIuVmQB0eCriTvA8iOGMOzlSQrxvXnT9p0WP+6ousueJey4hnVkEcAakm5oplpgVDmTJUF",
	"3SBqV3T999OxA1wRWhSkBJ4zviB6zVXfUszcR1sIh3UC0ZdLIOYLKekCIjxPyU8KkJLwqxbXwAN1kNkG",
	"P5USbpioVOjUsw6cOrGQiA6kqHiKURH84NDcw6Ns32MyqNc44vvt3xRbuE9tqC/Y4nJTApmzwtyX5J+V",
	"0oGAK4XbvgSiSsgM782JGcYgX7EFp7qS8OyKPzR/kQm50JTnVObml5X96Yeq0OyCLcxPhf3phViw7IIt",
	"enYgwJo6pwq7rew/Zrz0UdXr5F3yQojrqowXlMVnwdDK+fM+yrBj9pNGmkGeBbkB98eNdbk+f97HUrf3",
	"0OuwkT1A9uKupKbhNWwkGGhpNsd/1nMkLTqXv4+seGF663KeQq0hf8euUaA6s/LTWS1EvHafzddMcA32",
	"KozEjBNkts/exZKTFCVIzeygtCwnhchoMVGaahzpXyXMR89G/3JSC3ontrs6iSZ/YXpdYCdzGUswjG9C",
	"y3KPMV4Z4RFFrZ6DbviQPepzIcntkmVLopdMEcbtJqLcZThNATeU6+lor5P8PuYObxwQ9VbYS9JuRYsB",
	"9e4FsQ1noJD2ndB7TzUkRcQ4QYwTynOyKMQs/HD/rCxr5OL3s7K0qBoTNifA8D6HNVNaPUDM0PqQxfOc",
	"P5+Sb+Oxb1lREMGLDZmBu3cgN2Navu34uBPADWJxDfWI9xTBnRZyanbNo8HIZccgRpQql6IwV+BOMjKN",
	"v3NtYwo0vw/q/Kenvhjt/XSHEr1DKlKT/aV+uJH7LaLq0hT2MNR01u57GEWZUbbQkjqvEXxsusJfmIaV",
	"2kkkEUQRobntoVLSjZegJigJdSnoJwWWeEq6YByhHRuBnJMVvbb7IRDvhhBABUnbkpkVr26ZXtYiV0D9",
	"tPO++HMTcmrPidlwyoxsTAqmtBGGcDMVWUKBAicNioWYig4imgG0sGURAeZbSUtL5u6LleMYJzS8vyys",
	"d7zJB16ySZhjtUWNd4TqYGa+k+EmIbEKhyYMXxYiu/6OquURDv/Mj9U9FjgNWQLNQZIlVcvEmWrRdj3a",
	"EPo2DZFmySyaahqW+EIs1BGWWIh9uFpZfkWLwkzd5Wat1eLAgw5yURDTmMCKafMAZhxPwILdALesZ0q+",
	"ptnSCBMko0UxrvUSopwUcAMFEZIwzkGOiV5SXR9+HNk/lPAcKTB8UAOJVuN0GlNyuQQJcyHxoSqBrChe",
	"TivzPCqLZp/AXBVdQUt2wstSVNrAGL1czp/71cENcORJYWgEP6wRH/zx4FMzt/uEM3NhF0cloKKF8ayo",
	"8hp/gV80gDat66uW11MImaOih2rzG5MkE9IOYS9/N7n5D1BZd7bUeb+UMHFDSHoDUtHCrK61qAeBfI91",
	"OneczJxqGp1MR4XpF53lHNgPhUKQCe3GS/wPLYj5bAQcQ0k19TCUU1CmCfuBd7ZBlZ3JNDB8Swuysnoz",
	"UtLsei8ov6onT7OZQSfva6uqc1voFhF26HLNcnWsbcLB+vaqeUKszsezo46YspXpRHMNQcClKIllHy0Q",
	"LKfA0SxCxPro19qXYp2C6Uux7lxpYg1H2QkzzmBm/6VYP3eQCbkb8zj2EKSbBXK6AoW3W8MMYmapVdVn",
	"MyEPkyY6polaAU+oGTUSpsYtJGHTqpy4s5lQj9sGrYFIUC9tFwLaw6cw1sDChaYfAAvKjHoMLDQHOjYW",
	"xKpkBRyB9JdJIW5GFXz2mFx8d/b00eNfHj/93JBkKcVC0hWZbTQoct/p+YjSmwIeJB9OKF2kR//8iTeI",
	"NMdNjaNEJTNY0bI7lDW02IexbUZMuy7WmmjGVQcAB3FEMFebRTt5bfu9H4+ew6xaXIDW5hH8Sor50blh",
	"Z4YUdNjoVSmNYKGaRiknLZ3kpskJrLWkJyW2BJ5b05tZB1PmDbiaHYWo+jY+r2fJicNoDjsPxb7bVE+z",
	"ibdKbmR1DM0HSClk8goupdAiE8XEyHlMJHQXr1wL4lr47Srbv1toyS1VxMyNBrCK5z0qCr3mw+8vO/Tl",
	"mte42XqD2fUmVufmHbIvTeTXr5AS5ESvOUHqbGhO5lKsCCU5dkRZ41vQVv5iK7jQdFW+nM+PoyMVOFBC",
	"xcNWoMxMxLYw0o+CTPBc7dTmeGtgC5luqiE4a2PL27J0P1QOTRcbnqEa6RhnuV/75Ux9RG14FqnCDIwF",
	"5IsGrX5QlVcfpiwU91QCUoOpF/gZLQLPodD0GyEva3H3Wymq8ujsvD3n0OVQtxhnc8hNX69RZnxRQENS",
	"XxjYp6k1fpIFfRWUDnYNCD0S6wu2WOrofflKig9whyZnSQGKH6xyqTB9uiqmH0VumI+u1BFEz3qwmiMa",
	"uo35IJ2JShNKuMgBN79SaaG0x2vHHNSskhK4juVc1GcwRWZgqCujlVltVRItUvdL3XFCM3tCJ4ga1ePm",
	"EFw1bCs73ZLeAKGFBJpvyAyAEzEzi669HHCRVJHSyM5OrHMi8VB+2wC2lCIDpSCfOH32Tnh9O3v/6C3I",
	"w9XgKsIsRAkyp/LDrOD6Zifw17CZ3NCiMuL59z+rB3+URWihabFjC7BNaiPa6rvuUu4A0zYibkMUk7LV",
	"FtqTYERsw3QK0NCH7Ltjr3f722B2iOADIfAGJHrUfNCj5Sf5AEQZ4P/AB+uDLKEqJ0YM7FU/GMnV7Den",
	"XHjZcMcMYYKCKj3ZdaWYRg29iVlqxMVTtwgO3CNPvqBKoxhIGM9Rf2uvQpzHypZmitGeTmU4Ze9rzEz6",
	"s3+IdafNzPXOVaXCq0xVZSmkhjy1PLRZ9871I6zDXGIejR2eflqQSsGukfsQGI3v8OgUAfgH1cFC7Wze",
	"3cWh14ERXzb7YrkBX42jbTBe+FYR4mOn2h4Ymar3wJIbUy16mwlRAEWVqdKiLA2H0pOKh359GLywrc/0",
	"T3XbLklaM5CVVHIBCk1Mrr2D/NYiXaGta0kVcXB4/wRUeFkXuS7M5lhPFOMZTLadF3wEm1bxwTnouFfl",
	"QtIcJjkUdJPwtrCfif28J2H4sZFAav2B0DCZoTUxTSP1mfD+pofNKnAqlRK8CX4hmTnn5hlVk5rrffik",
	"OeC0Kb7piPVemAXBSNKBHw+RZekpMSLe/TdCG7JyRIercbfSHdfSg70w6wdBII47qRUB7dn/G5SbOwhg",
	"R51/A6pv4fXUx1p2j/of7/bGhdm6ylq3TfKK6OXLOxhjHw/qsUW8olKzjJX4XP0eNkd/vbcnSPpKkBw0",
	"ZQXkJPpgX/Jl3J9YN+T2mIe95gepW7vgd/StieV4z6wm8NewQbXJKxvREGmrjqGOSIxqLlzKCQLqvebN",
	"iyduAmua6WJjBFu9hA25BQlEVTPrtdI1oWlRTuIB0jFT/TM6g3zSHL7VQ+ACh4qWl/I8tK+t7fBdtp5c",
	"DXS4V1YpRJHQf7ZPfAcZSQgGuQuRUphdZ7QoNkSHsBlPSQ0g3QWB3hhBnrmnGmjGFZD/FhXJKMcXbqUh",
	"CGlCouSDwrKZwYibYU7nqlpjCApYgX3N45eHD9sLf/jQ7TlTZA631uWGY8M2Oh4+RFXcK6F043AdQdtt",
	"jtt54tJBW6W5ZN2rrc1Tdju5uZGH7OSr1uDBwGnOlFKOcM3y78wAWidzPWTtMY0Mc/DDcQeZ75ouYZ11",
	"475fsFVVUH0MQyXc0GIibkBKlsNOTu4mZoJ/fUOLl6Hb+/EI1pAZGs1gkmGU4MCx4NL0sYGFZhzGmTnA",
	"NnBkKEBwbntd2E47Xtq13zJbrSBnVEOxIaWEDGyUnJFSVVjqlNiQiWxJ+QJfQFJUC+fqbMdBhl8pqwmT",
	"Fe8Msa8optd8giYMlQxTQ7Olj7Y0QhhQ87Jt2z/sY+2WBlDsZTTo0o62p20PSppMx6Peh7/B90398Ld4",
	"a4aMHmpMbMiHEdJqaAZazxCfRlbqIjHeRnP4DDF8GCtNPXQKyu7EkVN4/bHPL/yiKsticwQhyQ5EJJQS",
	"FF5psRpQ2a9iTn5gmRRnxUKEO09tlIZV13hju/7Sc1xfH/ICFrxgHCYrwSHxpH+JX3/Aj4PVjvYa7hkR",
	"BaK9Bmw/fBpIaC2gOfkQkr7rJiHJtM9+29KpvhHyWFZ2O+DgN8UAy/VOtw435aH2dVoUCZO0VT90uIga",
	"B6dwJglVSmQMBcXzXI2d97m1Ylu39hb6X4XQqCMc4Pa4LdtrFIZlFflQlISSrGCo5hdcaVll+opT1PRF",
	"S004C3rlQL9a+CvfJK2HTqiJ3VBXnKKjaND/JR2D5pDQQ30D4LXDqlosQOnWA2sOcMVdK8ZJxZnGuVbm",
	"uEzseSlBosfe1LZc0Q2ZG5rQgvwOUpBZpZtPjlWlNFGaFYUzBJtpiJhfcapJAVRp8gPjl2sczvuR+CPL",
	"Qd8KeR2wMB3OuBbAQTE1SXs6fmu/YlCJw8nSBZhgrIX97D2e69wQI7P2RtKK/3v/P569OZv8g05+P518",
	"8W8nb989ef/gYefHx+///vf/1/zps/d/f/Af/5raPg97KhjcQX7+3L3Rz5/jQyyKE2nD/kcwyKwYnySJ",
	"MnYoatEiuY/5MhzBPWjq/fQSrrhec0N4N7RgueFFRyOf9jXVOdD2iLWorLFxLTWeR8Cez6E7sCqS4FQt",
	"/vpB5Ln2BFsdbuItb8UYOM6ojg6gGzgFV3vOlFvtvW+/viQnjhDUPSQWN3SUWiDxgnERjA0vH7NLcWDX",
	"Fb/iz2GO70HBn13xnGp6Yk/TSaVAfkkLyjOYLgR55oMin1NNr3jnGupNIBUFNUcZpFKcgq7Sa7m6ekOL",
	"hbi6etvxQ+jKVm6qmIu6c9ZVk/kpJ0ZuEJWeuCQuEwm3VKZsIT7Fh4uGxt5b4bAyiaisEssniXHjT4dC",
	"WZaqneyhi6KyLAyKIlJVLl+B2VaitAiBY4aZu9hbQwM/CudUIumtf/JWChT5dUXLN4zrt2RyVZ2efoYh",
	"eHWKg18dDzR0uylh8MO3NxlF+72LC7dyOTqVT0q6SNlMrq7eaKAlUggKHCt8aRYFwW6N8EAfCYBD1QsI",
	"sch7bImFbO+4Xlzuhe3l03qlF4WfcFObsdN32sEoKv7gDdwRWU8rvZwYjpBclTLHwO+VTzBAF+bK8R4E",
	"ii3wAaCWojJLBpItIbt2ma1gVerNuNHdO7q4u9gzHKZQZ+SCA+fM4C+j3AxYlTl1ggzlm3aKG2WDIXDQ",
	"13ANm0thu08HZgeLstFFKVZU39FF2o3uWkO+8UF2Y7Q33/ld+RhRl44E4y49WTwLdOH79B9tKwAc4Vin",
	"iKKR56MPEVQmEGGJvwcFByzUjHcn0k8tj/EMuGY3MIGCLdisSLDp/+raNTyshiolZMBufFRvGFARNifm",
	"dTSz17F7MUnKF2AudXMRC0ULdNqfJg39KB0ugUo9A6q36mt5nGbCQ4cC+S0GTaPSZGyWAGuz30yjEoTD",
	"rXng4dvbtnGOxNOD3KnsmiA/EFTfvQ6Snh7yiHAIT+Sz8/d92JPwXnD+aTF1Isj2+8rgcCHFrdlNA6Dw",
	"qRsxwUt0T1WKLmDoddQwFQ1MidGwAOEgu6SfpLwj5m2xpiNjDFyE7T4xeElyBzBfDHtAM0DLxdHPbU2I",
	"zqrwkhcbj9RZgQJ1cBC1pENlw87GF/sBm2ZjIHktrHrAmliLj/6SKn/083HE0Q+UFj9NKplt+fPOI+87",
	"qrvZ8fw13WbtY6vPmQER3PTwWfR86jyfL2803iv33XjkQhxSeyc4StE5FLCwOLGNPZ3V+Znq3TRwvJzP",
	"kelNUo58kTIykkzcHGAeYg8JsRpzMniE1CmIwEbLOg5MfhTxYeeLfYDkLr8U9WPj3RX9DelgQeuNb6Rk",
	"UZpbn/VYrTLPUlx6i1rkabk44zCE8TExnPSGFoaTusDTepBOrjZ8+7Qysznfjgd9b6KBB82tEaWTvVZp",
	"5ZlD1hcL3n4Z6VfBXmuYifXERkYnn1az9cyciWS8AsZppw6vzZx3T5GZWKNPEd5w1sF9b+j6IfOARW4g",
	"a6aQyrFfn9howdsPkO2CfIqaFZKe06sFsuuTZA8Dpkec7iO7+1EKvSOB1FJg1mnAnUZnp56lKW11JZH6",
	"uh2H7LAhTC3FavoOZ3InezDaVZ42c919V6c77E+O5s/qR0ny11XK3SUvo+1c2lyL+6RlbJNDA4gtWH3V",
	"FmKTaG06LjXxGmEtxZIMo+8au7poU1AAagImDbl6cp0yS19dvVGAMsOF7xbpOXH3KN88iLzhJCyY0lAb",
	"F7yTy8e3/aA60Ty2xLx/dbqUc7O+10IEQcOaY7FjY5kffQXouj5nUukJWmaSSzCNvlGoSfvGNE0Lwk1/",
	"O6asqWdvORghuobNJGdFlSZlB9L3zw1EP4abS1UzvCgZt95GM0yFn3TQ3cM2ifBYx+6tCHphEfSCfgz8",
	"DDtYpqmBSRrKa07/JzliLV64jbMkaDlFTN0N7UXpFl4bxdJ3GW0kREduF9NtNp/Oucz92Du9sXxEf58Q",
	"YUdKriXKiJgOIBSLBeQ+05sLCrVZr1w+vULwRZ1L0Py+JX3glNgsfpiEb0v+PueeDn3O6Y1yIlgVIwl9",
	"/JhByOvoOsw9iJMsgNvMLaP9640UScTFjvHYItKMflze3nGbT7oOX7bchWufXruHYbNxewqguXtWKfDr",
	"235ou9vlUDfuczpupIjdfsBwQKQ4plUkwHSIpodz07Jk+bpl+LOjTg8giYHiXjcTfAtnyJbcYDvw03Qs",
	"3lGr5565HbG9M3ac4DP/xDwyrT+z88g1Z4NmLttAXkm0JjW8hbv59MNDc+Dav//5QgtJF+AsghML0p2G",
	"wOXsg4YoJb0imlkH6ZzN5xBbwtQhVpwGcB17Rz6AsHtIsGsuC2/LrfTZJbIdtFWvYDdC0/SUoJQ+n4vL",
	"rj3SPzwi3Vq4bKKNO8ComEwo8D1sJj/TojIvISZV7ZvqDITNa30PmrhZfQ8bHHmny6cBbMeuoCruNSCF",
	"pqwr4ZOKsoTfU43qC/gGbmzhHjt1lt6lI22NK6XRfzTqG6pRT6K5lA93bGoXGQPpkL26SHudmLMFzW1p",
	"E/quLWL5btkneoLEUzH03jjkkguZNnZ6lwEtPOHjYkfvx6O7+Xuk7kk34o6deBWu5uQuoDemtf83nL72",
	"3BBallLc0GLi/GT6hA4pbpzQgc29W81Hfl+lT8Xl12cvXjnw349HWQFUToKqo3dV2K7806zKluDYfg3Z",
	"dOxOt2tVYdHmh5TZsSfNLaZeb2nTOrVuar+p6KA6z5p52lN8J990Ll52iVtcvaAMnl61Rdo6ejWdu+gN",
	"ZYU3/Hpoh2rZ7XKHVVdK8ol4gDs7iUXef3ceqzdO4OrqzY3HbG1PsY5SISV+wpdOHejp3OE16bNa0/oO",
	"DonrfImZTNPvLu7ynCJjdA5n9Ohy4DdCNi4qF9WYdFj7cAKieUxYPKaN8pfOCt8RC6fEipC/Ln41vOHh",
	"w/jgP3w4Jr8W7kMEIP4+c7/jO+rhw6RhOKnqMywLNXmcruBBiIvo3YiPq4bgcDtMXDi7WQUZWfSTYaBQ",
	"63nm0X3rsHcrmcNn7n7JoQDz03SIqiLedIvuGJghJ+iiLyoxOD+vbDlPRQRvx+BjlKwhLbx6XAUPa2fv",
	"HiFerdDuPFEFy9JOP3ymDEvi1qXXNCbYeLAN2cxRsR6/cl6xaHTTTB1k8mwtJJo1iXCVzARc43cmHAuo",
	"OPutgqisL97ErcvZP4Vw1I6AndYvuoHbVYNHhxT8vbuJ0GvVtimMtppcnwczoEdEqs7UnvEO8Ywd5r8l",
	"VsFRlL8+MbBt6VyHd1LW1nfe9iLQzgzs2aezuPY/kFw5TLuZz4fsNFOTuRS/Q1p2QCNhInWHt24zVMD/",
	"Djzlo9pmZMFzoC5YXc++i0CG6xb6SOXOugS/6FA175ArPM0n9tvoPZUG0X73qw1UOr2424S+h2rseNIM",
	"pOlhZnhgI7dwrOXj3d0otyfU5rVoRJ6lz3kcKHpix6/PuYO5E1xb0NsZTRU6Mu9FA1O0/Q3HPC2I7+w3",
	"SIXUDHZ2EsUyhLbMJvsrQdbWo26q5APffnbawa+++pGHFBc/78bWV6VQIjFMxW8pRz9C7Gc5oOutwPph",
	"mF63QmKCT5X2IcwhY6ukMvzq6k2edT2/crZgtqR4pYDQuXZ5Ht1Atqi8pSJXzTvkInGoOZ+T03F9Zv1u",
	"5OyGKTYrAFs8si1mVOEFHXwiQhezPOB6qbD54wHNlxXPJeR6qSxilSDhfY6iZ/CEnYG+BeDkFNs9+oLc",
	"R4dhxW7gQfqCccLa6NmjL8bbKmcjxrFI/DYmnyOX94EMacpGr2o7hmGrbtR0ZMJcAvwO/ffJlvNluw45",
	"XdjSXUG7T9eKcmoQkoJptQMm2xf3F105Wnjh1joDSkuxIUyn5wdNDcfqiSY3DNGCQTKxWjG9cp6iSqwM",
	"hdVlyO2kfjisr+fLoHm4/Ed0wS4Tb/xP8Nyiq54IR/Sq/xHt7TFax4TajK0Fq+MvfIVacu4zU2NduFAO",
	"zuLGzGWWjvIqhmPMSSkZ16g1qvR88jfzfJc0Mwxx2gfuZPb5k0R9tWYJIr4f4B8d7xIUyJs06mUP2Xsp",
	"x/Ul97ngk5XhKPmDOqVDdCp7fcXT/r19bsc9Q99ZujbjTnoJsGoQII24+Z1IkW8Z8I7EGdazF4XuvbKP",
	"TquVTBMMrcwO/fT6hZNEVkKmKl3UDMBJJRK0ZHCD8aXpTTJj3nEvZDFoF+4C/af1bvNiaSS6+dOdfCxE",
	"VuXEOy2kVTKS/s8/1Pnx0bht43Zb2kshE3pap3H8yG6p++kL2zZ06w6I33owNxhtOEoXKz3hHjaeI/T5",
	"FP5ebZDsnjdUpY9+JdK841HWf/gQgX74cOxE5V8fNz9b9v7w4XCX2bS+0PyaQM1hd007e6Xpm9rqL0VC",
	"e+ereAa/MZeqJKFh7bvLzAfDK2duqDFpVkz8+OLHccIW9/ZGTp+jq6s3+MWjCP9o4+gTs1vc2zogpp9d",
	"NIvJJqkpD9+jkApKvhTroTTVusU8Xf0BUNSDkoFKQlxJp1hu0nFip9dPRL5m1BkUwjxc43pYg51Y/kS7",
	"YFAz3rIXFSvyn2ujdOuikpRny6SP+cx0/MW+CqIGkUIjW1LOoUj2to/nX/wjO6EG+KfoGXbFePpTuy6z",
	"hb0FaQ1WEwg/pR/f4IrpwkwQo6iZnytkPCkWIic4T13IpGaR3QLnqcKyiZB/HHZVaeekjLkUXH2ROSvQ",
	"qzZtHseWE0l1Tx42iZG483pELMqvrJbCjg6SULbCW1zRVVkAHsIbkHSBXQWHVndM4IYjR1VKiCrNJ2yJ",
	"uWAE0ZXkRMzn0TKAayah2IxJSZWyg5yaZcEa5x49e3R6ejrM5oj4GrB2i1e/8Jf14h6dYBP7xRUCs/UT",
	"9gL/EOjf11S3z+Z3ictVY/2tAqVTLBY/2PhsNBib+91WYg1Vg6fkW0xXZgi9UTEAdaQ+4XIzRWhVFoLm",
	"Y8wRffn12QtiZ7V9JCDqsBLsAhWCzSOStPkMT5nq07H1pLIaPs72TDpm1UpPQo3WVGJF06IuLctazlCo",
	"KoyxMyXPrZY2+PnYSQhmGpcryKOSsFYrgMRh/qM1zZao/pyOtmqYe4oDDa9o7DlgbT2KwmBD/Szk4GYZ",
	"rqixrWk8JkIvQd4yBZiGAm6gmb8xJD91+nmfz7G5WllxbglnuocUG6pl7bsLHjgrAnt3iyRkrX24symw",
	"TuyBNc/3rf18gb3SYTytQtItNwhbQWPta3BMyQ/O9pFRLjjLsPZESgTHzIzDrKwDynSkzZ9q5M5y4hgm",
	"y1eHeHWHxd6C1p5lOsR1fRyir2a/LeHYPzWsXU3ABWjleCDkY19N3tnrGFfg6qEZ+oo5qpAJT7BklEzw",
	"KDmih/p4hMnVelSv35hvPzpVPaaQuWYcVXAOqe5FaO1thWJodueEabIQoNxqm2Fi6o3pM71ccwTh7fSF",
	"WLDsgi1wDOuZaJBinYK7Q515F2HnkmvafmXaulIG4eeGh52d1K/7bZKFqLD/qRLsvehPuYJ5v5oIuWH8",
	"eLQtxLjV8x/vZUOGcIOOgFDifd4hm1DNvjnK1+bJaukNWxAbyJvMIsx4AowXjHv7bzotVpa8S3Bj8DT3",
	"9FOZpNo+OgZxvEugRU90DMbYWweCuw7VLsxgUIJr9HP0b2NdiL+HrYQG9euC8g3xh8JQdySUfEWL4Buf",
	"KKuP0pkTxqzvcKvQfoqtGLY+8ZG6DXTtjAsN3bE4yr73VF/y0VmVL0BPaJ6n0tB9iV8JfvXxhbCGrAo1",
	"wULYaTN7e5fa3ESZ4KpabZnLN7jjdDlTVClYzYqEJ+7z8BHysMOYl2q2wX9TBbH6d8b5wO8dDO4d3vP9",
	"ShZ0g9tT0rOh6Ylii8lwTOCdcnd01FMfRuh1/6NSuo8D/0OEebe4XLxHKf72tbk44qzdHZd/e7WEpNro",
	"Xi/wu08PFhK7NrkSXmWdsm/ooIGbl9iyFvC+YRLwG1r0JGCIjTj2frWGjb40DFlvlhGqXTI7TUnNE4ao",
	"MPrTgVmH7JahqGvt7HO5th7XH9KW4vCxFen9hsfvG2ZG6wRXM5Re8+JhFsCaCPY1AbrKDF19KS0KkQ3m",
	"DG6YM9OpP3OvWK1cIvyEk97NSuTxWYiduwDSjM36LyciLfBhm/yGT6vkF3mbHq2hHwlEMzSJGaLRLWFs",
	"4zQ9eB4YO3U8UaSydZgl37ACa0X958XLH0f9GxntQHdLXSbtpAq7b2NC4FqbPBaigY8tPEDwIq3/Vj0q",
	"dUwVlT4Nrlhx8sM3VkE4BCSbNmmf1i+GDt4hgIWwRaJSZTS6yWpG9XZ45EfUUG+v5SgxdaSo4vubvuQ8",
	"vogRfo+LJTmfQ+ttWkq4YaLy3qM+asSrk+yvLo9coyhSD3tLxmt9antor/X20pVIt8t0+rzvf7YeIgS4",
	"lps/gC23s+ntiluJB6/VdNdNSChGO6g4bUMwHlLgK1VLyj0PvdrdShcNWurU5uqQ1fMhL4IOPt6PR+f5",
	"XjJzqh7ZyI6SulVfsMVSf1mI7Po7oDlIW1MmpUOwFWVWsJqBVEtW4hErhWJ1TejCDOaSuS9xuOnQ8CxD",
	"wDYzkE8U0RnLO9HfQKaxRnjtCiwBhvu6lOklGgi8FRmbfAJ3IAmQQ6mXWyVk6+Bf6mVdOhZc9CFTZAbO",
	"XnUDfEzYFKbtgMW8TgxGCqBzr3mXQugBtZVD6BqiMQY6RV+dOt3bZf9O3r8oraUtpzwdXojnLMSF2GDb",
	"W6rq7GGtVBqDQ/bnc8iw6MHWFIz/tQQe5eQbe30twjKPMjKyEDKKZTuOasaoYd2WDHErqFFdsg8JaV9S",
	"lGvY3FOkQUPJqtAhyvqQKgCIHGu894Ul+uxZzjmWqUBPiCAfC+GKMNR1tg4pBBFlKD0QDE/j5nqqs5Ye",
	"Bo0XYw8Aw3Tdc9LelIj4GunL8NitsN+vHnkOmrJCOcdiGkoOxEpEct4tyX3rShZgss1gIvbFC0D533yS",
	"XjtLwa5dlSJEmDXI31KZ+xZHSZVo702WBnoeZmZ1cFzXtWtfZywbpZoVwghAk77g4Ga0WnDjvqesv32d",
	"uA6hnoOUkAdDcCEUTLTwoXZ7JIB1IbRbsGcjDQ7CWyuqY4+wcbui3joar+tiIlgSlGLdDOoCEGKsEAkr",
	"aqCXUYGPtO571w59Zb/7vDK+xON2nXof3sO52F0l3Ydfmnumhfn4dM2JEw725l6NZDQHqOMZ5yAn3nLf",
	"Lu/Bm6lSMbd2XmVWVInPZjBZDE49t4WbJTXZWXeVrSdUlJnlGjYn9o3oK8/7HY+BtjKkBT1KKt4iiqMa",
	"KFQK7sVRwPu0KVxLIYpJjzn4vFuTpH0Yrll2DZicN0QnGSn4XvPYmEnIfbRCBkeh2+XGV9woS+CQP5gS",
	"csZthKj3GWpWoW1Nzu/pbfOvcda8slWGnNlhesXToXZY7Ufekfv5YbbwvD7epMDwyzvObwc5YHa95n2O",
	"kbdYFqhZK3o6VL3RdeppiVAR+VkoUgLUhbX+f4UsIaWBwww9USopdAqhxHkNEFWIVCTGIVmEzFBpTMWT",
	"IUAa+IDnag2FGzyJAOdZuSMzr/vsc8+KOZFQO+QcmoTX5bW1TFz1qUbaM4dZmpxxLiTEM6JzsU3WHaIb",
	"Mdc1/mfGtKRyc0iq3CaqUmqoXizvdJEN3rH1QmoP2S4Oi0LcTpCtTUKFrZQ6wLRTzWvb16qt+5mjPoPI",
	"15YqJyJuyJLmJBNSQhb3SIf5W6hWQsKkEOh6m/LmmWvzSFhhbC8nhVgQUWYiB1sML01BfXNVnFOUvSDy",
	"X0yiwNIOpo2wfSI6HjiluX2tTX6C8trOYit+8y9NH5vCpE6BaBc9sX4hPUEloFzKQ4ch27gLLxKOzcrV",
	"VsqmReQ5WyPdgEwd+TnRsoIxcS2sQBKTEB58KoGsmFIWlEBLt6woMIMIW0deLMEJLI3aHtn5HJ3fbxh6",
	"OTazyViRujS3Y0jBE/OAizgrH9FLKarFMqoREeD0T3dZuYd9PMpPqkJHVAwTNlM8ISuhtHsW25HqJdd+",
	"v/czwbUURdFU5Fk5f+FMFj/Q9VmW6RdCXM9odv0AH+Fc6LDSfOzTarQdtuuZZCsP57CXgl7zCZKH2p1q",
	"37ZDV2ZHz4N5Z4v7dQwPuzT5EZhvdzPX3XaNs+7C2utq8tn0W+iME6rFimXp4/bncnnudVROca9ktk1b",
	"idpmIsJmyAfieyz4sCH37KIZOE2W0j0jjkc4Xx7kROa/KMa3xyVzcDyo5w7t8h0nYE2yXjGwBQBCapNh",
	"6Era8tWxkBYYjljY5DnoidQGdOCFgw6fd4PNjHB0oDTcCaiOC3oA8L7VYIxtVlTrzj4Ta//9QZ029SDg",
	"32+n8gbz6POkvahJS1pfWp/MrIcjpItQbHU7vcREKLOhzqfKWwkHXv4RAP3uqA0YBjml7gvGnLIC8kmq",
	"UvV50IGNo+e6C6yNRvc1PS0nz2jlq0GbsSsJLrmWlf5l05xYUkNKIjTvasR5DmuwgXm/gxS2lvM4MmdB",
	"YUs9tzQKopwUcAMNL12X8atCKZTdgO+rQmeSA5Ro8W0r2lLup3GlyJb2xa19EjkwDsFuUh1jEWt3iuzQ",
	"tSQ1Q2s+scdEDT1KBqIblle0gT+1r8jR1CWao5xAVef5MPFPzKHT/GRHeO0HOPP9U6KMx8TbYXxobxaU",
	"Rt02BrTTHb1Sfaeep73R43R2wVCEs+XBrm1JvOYbqqS3vF+r2SX5+iU2cJ+Y4BFiv15DhlKNewpB7h5D",
	"PZYTlwcLqZ0D5PbBYLoktPlL4ISLqO71LVXhFVNn9vU/2ImxEePuoX2Ajb52Gr/7zhIcjKhWws10mdpA",
	"1nfT8X+Sk7j1IPaOl6IRBS5+e4tqzFO3e3ZgA1EVOeFmP43sj3Wi3S3muPiYzCo/UFGIW1vIOn6iPgdv",
	"z7XU501MTixn4Vr2zvFjl3S6rQVhUVjQim6IkPiPeZD+VtGCzTfIZyz4vhtRS2pIyBmQrReFc7Y3E28X",
	"r8YeMK+IEX4qu242dMxouI0ZJQLaXOS+dJ8gK3oN8Tagg4jln5k2jFNVM1RqmCu7tZ1dLLjF+xRdK5rH",
	"SgBMNrxpcAef9N70/l91rHI8lc8BWhY082XLXQHCJp8xwlAgLr2E1fbY9i5f8yTgW0VEK31ulPwAbeqe",
	"rCsV6NVXIK0BdqcMfKc23J2WMVAp3KpztSUrwKClHHsXjhO421lSXO551+Li6tcfZ3eSWcL7ljEE/D/Q",
	"rjTcKzrhjOkq+vF6bMH8j7ALjexLCVitGnwm1hMJc7XLkcbqwWdiXQOsgu6W8UwCVdbv6Pyle7bWSbAZ",
	"N89o67UbzKphlBzmjNeslvGy0olXEObC5psIYbE1AdHaY5vrkzGMKHpDi5c3ICXL+zbOnB5bHjou1OQt",
	"KK5vQgESbuTuAEzVL0AMoq/183Ezc/3bIpPWd1ZpynMq87g54yQDaaQGcks36nBTVbA67DJW0UgWaqaI",
	"icxWSNoWkGLjrM13NCQFAOkRLUoDLEHopJ2wAlnFkBY9hp8uDH8KS9CKrieFWGCod8+BcLnO0XRoH5CC",
	"oxLdSnfD1u3nUex32D4NlqNxjEgLnHXIFNvP/UvcSnyE/sSZ3nryrYazHXtvPZ3twfRI5Ys6PMMSS/c8",
	"ptIluGxcccoEL6r6YCJPexBtYtIluqNV79lF9K9wuTZiFfrwgqVNF45UUgarV5igvkFtCcAAVccV0Mx5",
	"iHUVcR1FhUXK2KW02FNPZ7X7/l7qAQ8VKcqd9ea0wUHHjLNPldftSSwmpSgn2RDfVluxKndGBgdpE8Ye",
	"+ohMCD3rDn43KtRwayTCaxRz27fQbW8xuV22sjLbpjLoUzL1cPSmAUPMkZfhEbaqNYy1CqqYcTsKsKlE",
	"C0yCUCIhqyQqmW/pZnfxz54KBBffnT199PiXx08/J6YBydkCVF3XolU8s3ZNZLytNfq4zoid5en0JvgU",
	"MRZx3nrpw97CprizZrmtqhNSd0qH7qOdTlwAqYjsbpnEg/YKx6nDIv5Y25Va5NF3LIWCD79nUhRFuq5Q",
	"kKsS5pfUbkUGGPMCKUEqprRhhE37KdO1U7ZaonIRM8ff2IRggmfgtc+OCpju8eVKLaTPpxf5GSbgcDYn",
	"AuuycLzK2om2rcu906x+D4VGdLeZASlF6UR7NicpiDBmS0axz05tivr0yE03MFvrsJsiROf8nia9M+5e",
	"wmJOtnP7Zjl2neb0ZhMT4oU/lAeQZp91oz+5zCGcpDYM/GH4RyJbztG4Rljuh+AVyffBlqjws47XRMgU",
	"Mwi0blaUBHkgAD3x0I2g1SjILspPL62NAa0R3vzcFj9+qM3SOyNTEBLfYQd4cSxz3S4EUzhwPnE29x8C",
	"UqKlvO2jhMbyd4VHe9YbLpJoi5zSRGtQli2JrlgYBcSrr0Kcec+rpBOOLoXQxLxMiyIRxm71OHimYsIx",
	"TwJ5Q4uPzzW+YVLpM8QH5K/7A7fisOUYyRaV6uhZWF/QQWBFIcofBSr+CmPr/wvMziZvRzeLM/x37kBU",
	"CdHCenvPgwUcOLnFMa1j16PPycyVfColZEy1HQpuvUgT4m1Bsrnzr4W1bsf+3rlU1M9C3+E4zL0/EPkx",
	"MrIFzwEHc33UPzFz6uEAydOSItUOoSTwl+J1cWH9HdfOHcsDHZa/K8rWuWf+rnhlmE118PJsEhtzeVUK",
	"uuscfOs3cJu48Ou1DU1QN7jK0NXVGz0bkkUuXRHIdMfEdkcpDXT3wkAfJaudRaUbw0GSJKxa5N6Vvabl",
	"LxnlaWjuohH30zuBAQGbEsVkfBTMK27HC0VwMVbcs3UxHwcvBsFNt2fkij8kakn928L9+fjp56PxCHi1",
	"Mouvv4/GI/f1beqllq+TcaV1Ip2Oj6grIXFPkZJuhtYR7M+bk0RunSbo48szSrNZ+kH3ndkwfLW66INz",
	"jnweeYu9Pl3ynP+52X/2ThsXzoolxjoxUNiHXTmCfu6rgmAz/fcUd2nx3YoVO93jGnV33o9HC5uTDovR",
	"/OIqFX7cPfcQ9KSHdEu/SwIwi5jEWhuTR1NFOfwG1N9x3RIFUTDmOqsk05sLg3+vcGe/JDPsfRsSM7ls",
	"X8H27qReLa6Be++yOo1Tpbxc/a2gBcqd1iWAG2lTFFPytS0I4y7Ev9+b/Tt89rcn+elnj/599rfTp6cZ",
	"PHn6xekp/eIJffTFZ4/g8d+ePjmFR/PPv5g9zh8/eTx78vjJ50+/yD578mj25PMv/v2eoXQDsgXUF3p6",
	"Nvo/k7NiISZnr84nlwbYGie0ZN+D2RvUrc0xHyUiNcPLFVaUFaNn/qf/7a/IaSZW9fD+15GrBjpaal2q",
	"Zycnt7e307jLyQKzn0y0qLLliZ8HU5c2XiqvzkNEkPX6wx2trU24qSGdo/n2+uuLS3L26nxaE8zo2eh0",
	"ejp9hOkzS+C0ZKNno8/wJzw9S9z3E0yafqJc7aWTOmg0aed/jQEy/jEvF5CT+yH879+Cp4d64KMI5y7p",
	"6D+VJcawivMcictVzR9h1V90/USwHp+e+r1wL5pIsDzBWLNn70aWf6SyH3eQelkDnISsrjneXfRP/JqL",
	"W04ww7M9QNVqReXGrqCBjWhw3Ca6UGiUk+wGE3Ga3m2cl6WreNWHcqyp2jzlvjMSSCiHZE6YrZLk6lap",
	"FMq71bbuiP2tGb87kyV2Bxu9MjD7BGchS7a7Bh3O0MfEIiycEaum7CB6PCqrBDq/xjA+tQ1n46hCk4VG",
	"FHnAeAejr6r/IRg1pLsI2Z7NX0ugBcpF5o+VIdTMf5JA8437v7qliwXIqVun+enm8YnXNpy8c5mk3m/7",
	"dhL7n568a6Tjynf09B6Uu5qcvHMZqnYMGBtETpxne9RhIKDbmp3MsNrq0KYQr65/KUjz6uQdauV6fz9x",
	"Qnr6IypO7Q174l8ePS1t9qD0xwYK3+m1Wcj24UybaLyM6mxZlSfv8D9IttGKbLmGE73mJ+hodvKugQj3",
	"uYOI5u9197gFZhn3wIn5XCHT3vb55J39N5oI1iVItgJuC867X20e2xMsbr7p/rzhWfLH7joa6Tp3XOaY",
	"H1Z578tmls/k9dFOHaruyuyGpd9qJyztCthdSWrbyt6PR0+OyJWb5R8SwHxJc+IzrODcjz7e3OfcxpAY",
	"0dKKwAjBk48HQWP7yPewIT8KTb7x2vunH3Mnzrl5OdLCC3QHin7Djk/7GjWyd2jGF1ZQETbrTvOoneV5",
	"h+jtGxKU/lLg7dqHsZValM6ro0Za/YRm3CxhPExs7ub+tckfvSDBRQ6j+HGrZQXv78gTWv6gVOrzhJ0J",
	"bakYVubsNQ1Qkylp295yduREYv0dJHz+3E9aR2P9xVP+4imBpzw9/ezjTX8B8oZlQC5hVQpJJSs25Cce",
	"wvwO5nFneZ7M/t08+jt53Hi0nmQihwXwiWNgk5nIN67M4qgxwTVYbVlHkDnx2qXGi6GHe3q9VUpaqcNH",
	"Rs/epNyoXDB1Wc0KlpkFT71uqaR6Gal+QiLkJvcbx5wsKCrfnE3+cTr54u27p397n4ye7gZS1RGIW78m",
	"SgeRnBVVyEejb4XL99C9pCINjhZE/SbxMsPDzfSG3DKei9sHAQO/VYB3h0OBn2Y0Tt00W5TV3dqatRuD",
	"AbkDaB8E6P+wdQsG2b/6XQu2fOuWOz5sDQX9VEt4+6E1byG16X9evPwxivi2+hXrNonxxvbAYniXFBi2",
	"dEvRb95WG//Kar6KDWYu0FRXqlHHePrX7fvXjXf3G+/bkKTflinWWGG0yzSjG3A6SMxP3mjvGn86bc3I",
	"Bq2kkuSb3wklCyxG372WZxty/rzzZrfd2hfhlxts2roLE5dcG8StfKrNDnrYyzZBzixkIXQI3bGL+ku0",
	"/ku0vtNzffDhGfJiT+rTvsWBaecVOnZ3XTM8EgtdoH9AB5QhWrdPenyPsvFdjV5Kg2cLckBOog82A1Ab",
	"zX+xiL9YxN1YxLeQOIx4ah3TSBDdfhq+oQwD09XlDUd0L3X45lVBZZQ2YZfi/gxHTD+APwjX+NhqyiSu",
	"rJYSo6uYDStIbOBxNZd/sby/WN6fh+Wd7WY0TcHkzrq+a9isaBk0fGpZ6VzcRn4BCIsNCepaNu3Dv/33",
	"yS1lejIX0tWLo3MNsttZAy0Q2QwTOce/1tXdO1+wZH30Y5zwM/nrCW2aapvuAob19nXs+BKkvjpzeU8j",
	"n2nGf649FWPPP2T7wefvzVvDshXIG38j1I5sz05OMHHZUih9ghqvppNb/PFtII934R5xZPIe6UJItmCc",
	"FhPnETKpndUeT09H7/9/AAAA///BZ2pbGyQBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
