// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"toyePDl5NPn4/wIAAP//57X0KgMNAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
