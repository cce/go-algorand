// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the merged config file.
	// (GET /debug/settings/config)
	GetConfig(ctx echo.Context) error

	// (GET /debug/settings/pprof)
	GetDebugSettingsProf(ctx echo.Context) error

	// (PUT /debug/settings/pprof)
	PutDebugSettingsProf(ctx echo.Context) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) GetDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDebugSettingsProf(ctx)
	return err
}

// PutDebugSettingsProf converts echo context to params.
func (w *ServerInterfaceWrapper) PutDebugSettingsProf(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDebugSettingsProf(ctx)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/debug/settings/config", wrapper.GetConfig, m...)
	router.GET(baseURL+"/debug/settings/pprof", wrapper.GetDebugSettingsProf, m...)
	router.PUT(baseURL+"/debug/settings/pprof", wrapper.PutDebugSettingsProf, m...)
	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zMdGZG3Y1pOTR7MP/zcAAP//NBOgoI4gAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
