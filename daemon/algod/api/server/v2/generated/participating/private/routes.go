// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"F/7QtoyePDl5NPn4/wIAAP//PBs0UwsNAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
