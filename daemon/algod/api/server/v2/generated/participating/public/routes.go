// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
