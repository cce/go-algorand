// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/go-algorand/data/basics"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address basics.Address, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address basics.Address

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", ctx.Param("txid"), &txid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"K2ZdmSgBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
