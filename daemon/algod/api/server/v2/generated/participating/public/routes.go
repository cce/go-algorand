// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
