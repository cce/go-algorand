// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
