// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"M2liUx8dn04+/v8AAAD//6dAKK1zJQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
