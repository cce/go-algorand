// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
